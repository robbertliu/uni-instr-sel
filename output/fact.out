*** IR Dump Before Preliminary module verification ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.body, %entry
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.body ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.body, %entry
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.body ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Canonicalize natural loops ***
for.body:                                         ; preds = %for.body, %entry
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end
*** IR Dump Before Canonicalize natural loops ***
for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %for.body.preheader ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %for.body.preheader ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end.loopexit
*** IR Dump Before Loop Strength Reduction ***
for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %for.body.preheader ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %for.body.preheader ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end.loopexit
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %for.body.preheader ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %for.body.preheader ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.end.loopexit ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %for.body.preheader ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %for.body.preheader ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.end.loopexit ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %for.body.preheader ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %for.body.preheader ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.end.loopexit ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Insert stack protectors ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.body ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Preliminary module verification ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.body ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.body ]
  ret i32 %res.0.lcssa
}
Writing '/tmp/llvm_JQrlRt/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_yQQJiZ/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_9LxhSy/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_foZ4D9/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_QFyfFL/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_SQNn3o/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_GS5F6D/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_4UcofZ/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_XR3I7l/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_A88niK/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_5g7a29/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_zc7ONC/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_6Aefs7/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_JAphQD/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_sruQLb/dag.fact.dot'...  done. 
Running 'dotty' program...  done. 
# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# After Instruction Selection:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Expand ISel Pseudo-instructions ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# After ExpandISelPseudos:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# After Pre-RegAlloc TailDuplicate:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
16B		%vreg5<def> = COPY %A0; CPURegs:%vreg5
32B		%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
48B		%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
64B		BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
80B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#1(20) BB#2(12)

96B	BB#1: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#0 BB#1
112B		%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
128B		%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
144B		%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
160B		%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
176B		BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
192B		B <BB#2>, %AT<imp-def,dead>
	    Successors according to CFG: BB#1(124) BB#2(4)

208B	BB#2: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#0 BB#1
224B		%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
240B		%V0<def> = COPY %vreg4; CPURegs:%vreg4
256B		RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# After codegen DCE pass:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg7
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7, %ZERO, <BB#2>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7, %ZERO, <BB#2>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7, %ZERO, <BB#2>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# After Machine LICM, CSE and Sinking passes:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7, %ZERO, <BB#2>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7, %ZERO, <BB#2>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7, %ZERO, <BB#2>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# After codegen peephole optimization pass:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7, %ZERO, <BB#2>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7, %ZERO, <BB#2>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7, %ZERO, <BB#2>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#1>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7, %ZERO, <BB#3>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#1(20) BB#3(12)

BB#1: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = PHI %vreg5, <BB#1>, %vreg3, <BB#2>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#1>, %vreg2, <BB#2>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#2>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4; CPURegs:%vreg4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function fact: SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0<kill>; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BNE %vreg7<kill>, %ZERO, <BB#3>, %AT<imp-def,dead>; CPURegs:%vreg7
    Successors according to CFG: BB#1(20) BB#3(12)

BB#1: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = PHI %vreg5, <BB#1>, %vreg3, <BB#2>; CPURegs:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#1>, %vreg2, <BB#2>; CPURegs:%vreg1,%vreg6,%vreg2
	%vreg2<def> = MUL %vreg0, %vreg1<kill>; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0<kill>, -1; CPURegs:%vreg3,%vreg0
	BGTZ %vreg3, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#2>; CPURegs:%vreg4,%vreg6,%vreg2
	%V0<def> = COPY %vreg4<kill>; CPURegs:%vreg4
	RetRA %V0<imp-use,kill>

# End machine code for function fact.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0<kill>; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BEQ %vreg7<kill>, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Predecessors according to CFG: BB#0
	%vreg10<def> = COPY %vreg6<kill>; CPURegs:%vreg10,%vreg6
	B <BB#3>, %AT<imp-def>
    Successors according to CFG: BB#3

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg8<def> = COPY %vreg5<kill>; CPURegs:%vreg8,%vreg5
	%vreg9<def> = COPY %vreg6<kill>; CPURegs:%vreg9,%vreg6
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = COPY %vreg8<kill>; CPURegs:%vreg0,%vreg8
	%vreg1<def> = COPY %vreg9<kill>; CPURegs:%vreg1,%vreg9
	%vreg2<def> = MUL %vreg0, %vreg1<kill>; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0<kill>, -1; CPURegs:%vreg3,%vreg0
	%vreg8<def> = COPY %vreg3; CPURegs:%vreg8,%vreg3
	%vreg9<def> = COPY %vreg2; CPURegs:%vreg9,%vreg2
	%vreg10<def> = COPY %vreg2<kill>; CPURegs:%vreg10,%vreg2
	BGTZ %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#2 BB#4
	%vreg4<def> = COPY %vreg10<kill>; CPURegs:%vreg4,%vreg10
	%V0<def> = COPY %vreg4<kill>; CPURegs:%vreg4
	RetRA %V0<imp-use,kill>

# End machine code for function fact.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%vreg5<def> = COPY %A0<kill>; CPURegs:%vreg5
	%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
	%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
	BEQ %vreg7<kill>, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Predecessors according to CFG: BB#0
	%vreg10<def> = COPY %vreg6<kill>; CPURegs:%vreg10,%vreg6
	B <BB#3>, %AT<imp-def>
    Successors according to CFG: BB#3

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg8<def> = COPY %vreg5<kill>; CPURegs:%vreg8,%vreg5
	%vreg9<def> = COPY %vreg6<kill>; CPURegs:%vreg9,%vreg6
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = COPY %vreg8<kill>; CPURegs:%vreg0,%vreg8
	%vreg1<def> = COPY %vreg9<kill>; CPURegs:%vreg1,%vreg9
	%vreg2<def> = MUL %vreg0, %vreg1<kill>; CPURegs:%vreg2,%vreg0,%vreg1
	%vreg3<def> = ADDiu %vreg0<kill>, -1; CPURegs:%vreg3,%vreg0
	%vreg8<def> = COPY %vreg3; CPURegs:%vreg8,%vreg3
	%vreg9<def> = COPY %vreg2; CPURegs:%vreg9,%vreg2
	%vreg10<def> = COPY %vreg2<kill>; CPURegs:%vreg10,%vreg2
	BGTZ %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg3
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#2 BB#4
	%vreg4<def> = COPY %vreg10<kill>; CPURegs:%vreg4,%vreg10
	%V0<def> = COPY %vreg4<kill>; CPURegs:%vreg4
	RetRA %V0<imp-use,kill>

# End machine code for function fact.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
16B		%vreg5<def> = COPY %A0<kill>; CPURegs:%vreg5
32B		%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
48B		%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
64B		BEQ %vreg7<kill>, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
96B		%vreg10<def> = COPY %vreg6<kill>; CPURegs:%vreg10,%vreg6
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
144B		%vreg8<def> = COPY %vreg5<kill>; CPURegs:%vreg8,%vreg5
160B		%vreg9<def> = COPY %vreg6<kill>; CPURegs:%vreg9,%vreg6
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
192B		%vreg0<def> = COPY %vreg8<kill>; CPURegs:%vreg0,%vreg8
208B		%vreg1<def> = COPY %vreg9<kill>; CPURegs:%vreg1,%vreg9
224B		%vreg2<def> = MUL %vreg0, %vreg1<kill>; CPURegs:%vreg2,%vreg0,%vreg1
240B		%vreg3<def> = ADDiu %vreg0<kill>, -1; CPURegs:%vreg3,%vreg0
256B		%vreg8<def> = COPY %vreg3; CPURegs:%vreg8,%vreg3
272B		%vreg9<def> = COPY %vreg2; CPURegs:%vreg9,%vreg2
288B		%vreg10<def> = COPY %vreg2<kill>; CPURegs:%vreg10,%vreg2
304B		BGTZ %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg3
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
352B		%vreg4<def> = COPY %vreg10<kill>; CPURegs:%vreg4,%vreg10
368B		%V0<def> = COPY %vreg4<kill>; CPURegs:%vreg4
384B		RetRA %V0<imp-use,kill>

# End machine code for function fact.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
16B		%vreg5<def> = COPY %A0; CPURegs:%vreg5
32B		%vreg7<def> = SLTi %vreg5, 1; CPURegs:%vreg7,%vreg5
48B		%vreg6<def> = ADDiu %ZERO, 1; CPURegs:%vreg6
64B		BEQ %vreg7, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
96B		%vreg10<def> = COPY %vreg6; CPURegs:%vreg10,%vreg6
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
144B		%vreg8<def> = COPY %vreg5; CPURegs:%vreg8,%vreg5
160B		%vreg9<def> = COPY %vreg6; CPURegs:%vreg9,%vreg6
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
192B		%vreg0<def> = COPY %vreg8; CPURegs:%vreg0,%vreg8
208B		%vreg1<def> = COPY %vreg9; CPURegs:%vreg1,%vreg9
224B		%vreg2<def> = MUL %vreg0, %vreg1; CPURegs:%vreg2,%vreg0,%vreg1
240B		%vreg3<def> = ADDiu %vreg0, -1; CPURegs:%vreg3,%vreg0
256B		%vreg8<def> = COPY %vreg3; CPURegs:%vreg8,%vreg3
272B		%vreg9<def> = COPY %vreg2; CPURegs:%vreg9,%vreg2
288B		%vreg10<def> = COPY %vreg2; CPURegs:%vreg10,%vreg2
304B		BGTZ %vreg3, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg3
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
352B		%vreg4<def> = COPY %vreg10; CPURegs:%vreg4,%vreg10
368B		%V0<def> = COPY %vreg4; CPURegs:%vreg4
384B		RetRA %V0<imp-use,kill>

# End machine code for function fact.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
16B		%vreg8<def> = COPY %A0; CPURegs:%vreg8
32B		%vreg7<def> = SLTi %vreg8, 1; CPURegs:%vreg7,%vreg8
48B		%vreg10<def> = ADDiu %ZERO, 1; CPURegs:%vreg10
64B		BEQ %vreg7, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
224B		%vreg10<def> = MUL %vreg8, %vreg10; CPURegs:%vreg10,%vreg8
240B		%vreg8<def> = ADDiu %vreg8, -1; CPURegs:%vreg8
304B		BGTZ %vreg8, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg8
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
368B		%V0<def> = COPY %vreg10; CPURegs:%vreg10
384B		RetRA %V0<imp-use,kill>

# End machine code for function fact.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
16B		%vreg8<def> = COPY %A0; CPURegs:%vreg8
32B		%vreg7<def> = SLTi %vreg8, 1; CPURegs:%vreg7,%vreg8
48B		%vreg10<def> = ADDiu %ZERO, 1; CPURegs:%vreg10
64B		BEQ %vreg7, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
224B		%vreg10<def> = MUL %vreg8, %vreg10; CPURegs:%vreg10,%vreg8
240B		%vreg8<def> = ADDiu %vreg8, -1; CPURegs:%vreg8
304B		BGTZ %vreg8, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg8
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
368B		%V0<def> = COPY %vreg10; CPURegs:%vreg10
384B		RetRA %V0<imp-use,kill>

# End machine code for function fact.

# *** IR Dump Before Calculate spill weights ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
16B		%vreg8<def> = COPY %A0; CPURegs:%vreg8
32B		%vreg7<def> = SLTi %vreg8, 1; CPURegs:%vreg7,%vreg8
48B		%vreg10<def> = ADDiu %ZERO, 1; CPURegs:%vreg10
64B		BEQ %vreg7, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
224B		%vreg10<def> = MUL %vreg8, %vreg10; CPURegs:%vreg10,%vreg8
240B		%vreg8<def> = ADDiu %vreg8, -1; CPURegs:%vreg8
304B		BGTZ %vreg8, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg8
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
368B		%V0<def> = COPY %vreg10; CPURegs:%vreg10
384B		RetRA %V0<imp-use,kill>

# End machine code for function fact.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
16B		%vreg8<def> = COPY %A0; CPURegs:%vreg8
32B		%vreg7<def> = SLTi %vreg8, 1; CPURegs:%vreg7,%vreg8
48B		%vreg10<def> = ADDiu %ZERO, 1; CPURegs:%vreg10
64B		BEQ %vreg7, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
224B		%vreg10<def> = MUL %vreg8, %vreg10; CPURegs:%vreg10,%vreg8
240B		%vreg8<def> = ADDiu %vreg8, -1; CPURegs:%vreg8
304B		BGTZ %vreg8, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg8
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
368B		%V0<def> = COPY %vreg10; CPURegs:%vreg10
384B		RetRA %V0<imp-use,kill>

# End machine code for function fact.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
16B		%vreg8<def> = COPY %A0; CPURegs:%vreg8
32B		%vreg7<def> = SLTi %vreg8, 1; CPURegs:%vreg7,%vreg8
48B		%vreg10<def> = ADDiu %ZERO, 1; CPURegs:%vreg10
64B		BEQ %vreg7, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
224B		%vreg10<def> = MUL %vreg8, %vreg10; CPURegs:%vreg10,%vreg8
240B		%vreg8<def> = ADDiu %vreg8, -1; CPURegs:%vreg8
304B		BGTZ %vreg8, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg8
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
368B		%V0<def> = COPY %vreg10; CPURegs:%vreg10
384B		RetRA %V0<imp-use,kill>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
16B		%vreg8<def> = COPY %A0; CPURegs:%vreg8
32B		%vreg7<def> = SLTi %vreg8, 1; CPURegs:%vreg7,%vreg8
48B		%vreg10<def> = ADDiu %ZERO, 1; CPURegs:%vreg10
64B		BEQ %vreg7, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
224B		%vreg10<def> = MUL %vreg8, %vreg10; CPURegs:%vreg10,%vreg8
240B		%vreg8<def> = ADDiu %vreg8, -1; CPURegs:%vreg8
304B		BGTZ %vreg8, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg8
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
368B		%V0<def> = COPY %vreg10; CPURegs:%vreg10
384B		RetRA %V0<imp-use>

# End machine code for function fact.

# After Register Allocation, before rewriter:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
16B		%vreg8<def> = COPY %A0; CPURegs:%vreg8
32B		%vreg7<def> = SLTi %vreg8, 1; CPURegs:%vreg7,%vreg8
48B		%vreg10<def> = ADDiu %ZERO, 1; CPURegs:%vreg10
64B		BEQ %vreg7, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
224B		%vreg10<def> = MUL %vreg8, %vreg10; CPURegs:%vreg10,%vreg8
240B		%vreg8<def> = ADDiu %vreg8, -1; CPURegs:%vreg8
304B		BGTZ %vreg8, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg8
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
368B		%V0<def> = COPY %vreg10; CPURegs:%vreg10
384B		RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
16B		%vreg8<def> = COPY %A0; CPURegs:%vreg8
32B		%vreg7<def> = SLTi %vreg8, 1; CPURegs:%vreg7,%vreg8
48B		%vreg10<def> = ADDiu %ZERO, 1; CPURegs:%vreg10
64B		BEQ %vreg7, %ZERO, <BB#1>, %AT<imp-def>; CPURegs:%vreg7
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
224B		%vreg10<def> = MUL %vreg8, %vreg10; CPURegs:%vreg10,%vreg8
240B		%vreg8<def> = ADDiu %vreg8, -1; CPURegs:%vreg8
304B		BGTZ %vreg8, <BB#2>, %AT<imp-def,dead>; CPURegs:%vreg8
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
368B		%V0<def> = COPY %vreg10; CPURegs:%vreg10
384B		RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
32B		%AT<def> = SLTi %A0, 1
48B		%V0<def> = ADDiu %ZERO, 1
64B		BEQ %AT<kill>, %ZERO, <BB#1>, %AT<imp-def>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Live Ins: %V0
	    Predecessors according to CFG: BB#0
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Live Ins: %A0 %V0
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Live Ins: %A0 %V0
	    Predecessors according to CFG: BB#2 BB#1
224B		%V0<def> = MUL %A0, %V0<kill>
240B		%A0<def> = ADDiu %A0<kill>, -1
304B		BGTZ %A0, <BB#2>, %AT<imp-def,dead>
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Live Ins: %V0
	    Predecessors according to CFG: BB#2 BB#4
384B		RetRA %V0<imp-use>

# End machine code for function fact.

# After Virtual Register Rewriter:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
32B		%AT<def> = SLTi %A0, 1
48B		%V0<def> = ADDiu %ZERO, 1
64B		BEQ %AT<kill>, %ZERO, <BB#1>, %AT<imp-def>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Live Ins: %V0
	    Predecessors according to CFG: BB#0
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Live Ins: %A0 %V0
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Live Ins: %A0 %V0
	    Predecessors according to CFG: BB#2 BB#1
224B		%V0<def> = MUL %A0, %V0<kill>
240B		%A0<def> = ADDiu %A0<kill>, -1
304B		BGTZ %A0, <BB#2>, %AT<imp-def,dead>
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Live Ins: %V0
	    Predecessors according to CFG: BB#2 BB#4
384B		RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %A0
32B		%AT<def> = SLTi %A0, 1
48B		%V0<def> = ADDiu %ZERO, 1
64B		BEQ %AT<kill>, %ZERO, <BB#1>, %AT<imp-def>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Live Ins: %V0
	    Predecessors according to CFG: BB#0
112B		B <BB#3>, %AT<imp-def>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Live Ins: %A0 %V0
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Live Ins: %A0 %V0
	    Predecessors according to CFG: BB#2 BB#1
224B		%V0<def> = MUL %A0, %V0<kill>
240B		%A0<def> = ADDiu %A0<kill>, -1
304B		BGTZ %A0, <BB#2>, %AT<imp-def,dead>
320B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(124) BB#3(4)

336B	BB#3: derived from LLVM BB %for.end
	    Live Ins: %V0
	    Predecessors according to CFG: BB#2 BB#4
384B		RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BEQ %AT<kill>, %ZERO, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Live Ins: %V0
    Predecessors according to CFG: BB#0
	B <BB#3>, %AT<imp-def>
    Successors according to CFG: BB#3

BB#1: 
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BEQ %AT<kill>, %ZERO, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Live Ins: %V0
    Predecessors according to CFG: BB#0
	B <BB#3>, %AT<imp-def>
    Successors according to CFG: BB#3

BB#1: 
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#4
	RetRA %V0<imp-use>

# End machine code for function fact.

# After StackSlotColoring and postra Machine LICM:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BEQ %AT<kill>, %ZERO, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Live Ins: %V0
    Predecessors according to CFG: BB#0
	B <BB#3>, %AT<imp-def>
    Successors according to CFG: BB#3

BB#1: 
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BEQ %AT<kill>, %ZERO, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Live Ins: %V0
    Predecessors according to CFG: BB#0
	B <BB#3>, %AT<imp-def>
    Successors according to CFG: BB#3

BB#1: 
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BEQ %AT<kill>, %ZERO, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Live Ins: %V0
    Predecessors according to CFG: BB#0
	B <BB#3>, %AT<imp-def>
    Successors according to CFG: BB#3

BB#1: 
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#4
	RetRA %V0<imp-use>

# End machine code for function fact.

# After PrologEpilogCodeInserter:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BEQ %AT<kill>, %ZERO, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Live Ins: %V0
    Predecessors according to CFG: BB#0
	B <BB#3>, %AT<imp-def>
    Successors according to CFG: BB#3

BB#1: 
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BEQ %AT<kill>, %ZERO, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Live Ins: %V0
    Predecessors according to CFG: BB#0
	B <BB#3>, %AT<imp-def>
    Successors according to CFG: BB#3

BB#1: 
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#4
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RetRA %V0<imp-use>

# End machine code for function fact.

# After BranchFolding:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RetRA %V0<imp-use>

# End machine code for function fact.

# After TailDuplicate:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RetRA %V0<imp-use>

# End machine code for function fact.

# After copy propagation pass:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RetRA %V0<imp-use>

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RET %RA

# End machine code for function fact.

# After ExpandPostRAPseudos:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RET %RA

# End machine code for function fact.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RET %RA

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RET %RA

# End machine code for function fact.

# After PostRAScheduler:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RET %RA

# End machine code for function fact.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RET %RA

# End machine code for function fact.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RET %RA

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RET %RA

# End machine code for function fact.

# After machine block placement.:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	%V0<def> = ADDiu %ZERO, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RET %RA

# End machine code for function fact.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
	  * %V0<def> = ADDiu %ZERO, 1
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
	  * NOP
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RET %RA
	  * NOP

# End machine code for function fact.

# After PreEmit passes:
# Machine code for function fact: Post SSA
Function Live Ins: %A0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %A0
	%AT<def> = SLTi %A0, 1
	BNE %AT, %ZERO, <BB#2>, %AT<imp-def>
	  * %V0<def> = ADDiu %ZERO, 1
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Live Ins: %A0 %V0
    Predecessors according to CFG: BB#1 BB#0
	%V0<def> = MUL %A0, %V0<kill>
	%A0<def> = ADDiu %A0<kill>, -1
	BGTZ %A0, <BB#1>, %AT<imp-def>
	  * NOP
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Live Ins: %V0
    Predecessors according to CFG: BB#1 BB#0
	RET %RA
	  * NOP

# End machine code for function fact.

*** IR Dump Before Preliminary module verification ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Insert stack protectors ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Preliminary module verification ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
Writing '/tmp/llvm_5wBS8K/dag.main.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_bwwLSl/dag.main.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_RvyjBX/dag.main.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_UCFt9z/dag.main.dot'...  done. 
Running 'dotty' program...  done. 
Writing '/tmp/llvm_NplEvd/dag.main.dot'...  done. 
Running 'dotty' program...  done. 
# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# After Instruction Selection:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Expand ISel Pseudo-instructions ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# After ExpandISelPseudos:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# After Pre-RegAlloc TailDuplicate:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
32B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
48B		%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
64B		%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
80B		%T9<def> = COPY %vreg1; CPURegs:%vreg1
96B		%A0<def> = COPY %vreg2; CPURegs:%vreg2
112B		%GP<def> = COPY %vreg0; CPURegs:%vreg0
128B		JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
160B		%vreg3<def> = COPY %V0; CPURegs:%vreg3
176B		%V0<def> = COPY %vreg3; CPURegs:%vreg3
192B		RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# After codegen DCE pass:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# After Machine LICM, CSE and Sinking passes:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# After codegen peephole optimization pass:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1; CPURegs:%vreg1
	%A0<def> = COPY %vreg2; CPURegs:%vreg2
	%GP<def> = COPY %vreg0; CPURegs:%vreg0
	JALRPseudo %T9, <regmask>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg3<def> = COPY %V0; CPURegs:%vreg3
	%V0<def> = COPY %vreg3; CPURegs:%vreg3
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function main: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0<kill>, %T9<kill>; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1<kill>; CPURegs:%vreg1
	%A0<def> = COPY %vreg2<kill>; CPURegs:%vreg2
	%GP<def> = COPY %vreg0<kill>; CPURegs:%vreg0
	JALRPseudo %T9<kill>, <regmask>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
	%vreg3<def> = COPY %V0<kill>; CPURegs:%vreg3
	%V0<def> = COPY %vreg3<kill>; CPURegs:%vreg3
	RetRA %V0<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0<kill>, %T9<kill>; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1<kill>; CPURegs:%vreg1
	%A0<def> = COPY %vreg2<kill>; CPURegs:%vreg2
	%GP<def> = COPY %vreg0<kill>; CPURegs:%vreg0
	JALRPseudo %T9<kill>, <regmask>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
	%vreg3<def> = COPY %V0<kill>; CPURegs:%vreg3
	%V0<def> = COPY %vreg3<kill>; CPURegs:%vreg3
	RetRA %V0<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0<kill>, %T9<kill>; CPURegs:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
	%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
	%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
	%T9<def> = COPY %vreg1<kill>; CPURegs:%vreg1
	%A0<def> = COPY %vreg2<kill>; CPURegs:%vreg2
	%GP<def> = COPY %vreg0<kill>; CPURegs:%vreg0
	JALRPseudo %T9<kill>, <regmask>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
	%vreg3<def> = COPY %V0<kill>; CPURegs:%vreg3
	%V0<def> = COPY %vreg3<kill>; CPURegs:%vreg3
	RetRA %V0<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0<kill>, %T9<kill>; CPURegs:%vreg0
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
64B		%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
80B		%T9<def> = COPY %vreg1<kill>; CPURegs:%vreg1
96B		%A0<def> = COPY %vreg2<kill>; CPURegs:%vreg2
112B		%GP<def> = COPY %vreg0<kill>; CPURegs:%vreg0
128B		JALRPseudo %T9<kill>, <regmask>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
160B		%vreg3<def> = COPY %V0<kill>; CPURegs:%vreg3
176B		%V0<def> = COPY %vreg3<kill>; CPURegs:%vreg3
192B		RetRA %V0<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
64B		%vreg2<def> = ADDiu %ZERO, 10; CPURegs:%vreg2
80B		%T9<def> = COPY %vreg1; CPURegs:%vreg1
96B		%A0<def> = COPY %vreg2; CPURegs:%vreg2
112B		%GP<def> = COPY %vreg0; CPURegs:%vreg0
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
160B		%vreg3<def> = COPY %V0; CPURegs:%vreg3
176B		%V0<def> = COPY %vreg3; CPURegs:%vreg3
192B		RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
80B		%T9<def> = COPY %vreg1; CPURegs:%vreg1
96B		%A0<def> = ADDiu %ZERO, 10
112B		%GP<def> = COPY %vreg0; CPURegs:%vreg0
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
160B		%vreg3<def> = COPY %V0; CPURegs:%vreg3
176B		%V0<def> = COPY %vreg3; CPURegs:%vreg3
192B		RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
80B		%T9<def> = COPY %vreg1; CPURegs:%vreg1
96B		%A0<def> = ADDiu %ZERO, 10
112B		%GP<def> = COPY %vreg0; CPURegs:%vreg0
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
160B		%vreg3<def> = COPY %V0; CPURegs:%vreg3
176B		%V0<def> = COPY %vreg3; CPURegs:%vreg3
192B		RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Calculate spill weights ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
80B		%T9<def> = COPY %vreg1; CPURegs:%vreg1
96B		%A0<def> = ADDiu %ZERO, 10
112B		%GP<def> = COPY %vreg0; CPURegs:%vreg0
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
160B		%vreg3<def> = COPY %V0; CPURegs:%vreg3
176B		%V0<def> = COPY %vreg3; CPURegs:%vreg3
192B		RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
80B		%T9<def> = COPY %vreg1; CPURegs:%vreg1
96B		%A0<def> = ADDiu %ZERO, 10
112B		%GP<def> = COPY %vreg0; CPURegs:%vreg0
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
160B		%vreg3<def> = COPY %V0; CPURegs:%vreg3
176B		%V0<def> = COPY %vreg3; CPURegs:%vreg3
192B		RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
80B		%T9<def> = COPY %vreg1; CPURegs:%vreg1
96B		%A0<def> = ADDiu %ZERO, 10
112B		%GP<def> = COPY %vreg0; CPURegs:%vreg0
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
160B		%vreg3<def> = COPY %V0; CPURegs:%vreg3
176B		%V0<def> = COPY %vreg3; CPURegs:%vreg3
192B		RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
80B		%T9<def> = COPY %vreg1; CPURegs:%vreg1
96B		%A0<def> = ADDiu %ZERO, 10
112B		%GP<def> = COPY %vreg0; CPURegs:%vreg0
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
160B		%vreg3<def> = COPY %V0; CPURegs:%vreg3
176B		%V0<def> = COPY %vreg3; CPURegs:%vreg3
192B		RetRA %V0<imp-use>

# End machine code for function main.

# After Register Allocation, before rewriter:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
80B		%T9<def> = COPY %vreg1; CPURegs:%vreg1
96B		%A0<def> = ADDiu %ZERO, 10
112B		%GP<def> = COPY %vreg0; CPURegs:%vreg0
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
160B		%vreg3<def> = COPY %V0; CPURegs:%vreg3
176B		%V0<def> = COPY %vreg3; CPURegs:%vreg3
192B		RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; CPURegs:%vreg0
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%vreg1<def> = LW %vreg0, <ga:@fact>[TF=3]; mem:LD4[GOT] CPURegs:%vreg1,%vreg0
80B		%T9<def> = COPY %vreg1; CPURegs:%vreg1
96B		%A0<def> = ADDiu %ZERO, 10
112B		%GP<def> = COPY %vreg0; CPURegs:%vreg0
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
160B		%vreg3<def> = COPY %V0; CPURegs:%vreg3
176B		%V0<def> = COPY %vreg3; CPURegs:%vreg3
192B		RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%GP<def> = ADDu %V0, %T9
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
96B		%A0<def> = ADDiu %ZERO, 10
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
192B		RetRA %V0<imp-use>

# End machine code for function main.

# After Virtual Register Rewriter:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%GP<def> = ADDu %V0, %T9
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
96B		%A0<def> = ADDiu %ZERO, 10
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
192B		RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %T9 %V0
16B		%GP<def> = ADDu %V0, %T9
32B		ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
48B		%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
96B		%A0<def> = ADDiu %ZERO, 10
128B		JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
192B		RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%GP<def> = ADDu %V0, %T9
	ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%GP<def> = ADDu %V0, %T9
	ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
	RetRA %V0<imp-use>

# End machine code for function main.

# After StackSlotColoring and postra Machine LICM:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%GP<def> = ADDu %V0, %T9
	ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: Post SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0
	%GP<def> = ADDu %V0, %T9
	ADJCALLSTACKDOWN 16, %SP<imp-def>, %SP<imp-use>
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def>, %SP<imp-use>
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# After PrologEpilogCodeInserter:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# After BranchFolding:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# After TailDuplicate:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# After copy propagation pass:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RET %RA

# End machine code for function main.

# After ExpandPostRAPseudos:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RET %RA

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RET %RA

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RET %RA

# End machine code for function main.

# After PostRAScheduler:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RET %RA

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RET %RA

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RET %RA

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RET %RA

# End machine code for function main.

# After machine block placement.:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	%A0<def> = ADDiu %ZERO, 10
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RET %RA

# End machine code for function main.

# *** IR Dump Before MachineFunction Printer ***:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A0<def> = ADDiu %ZERO, 10
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	RET %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function main.

# After PreEmit passes:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %entry
    Live Ins: %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	PROLOG_LABEL <MCSym=$tmp1>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	PROLOG_LABEL <MCSym=$tmp2>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@fact>[TF=3]; mem:LD4[GOT]
	JALRPseudo %T9, <regmask>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A0<def> = ADDiu %ZERO, 10
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	RET %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function main.

