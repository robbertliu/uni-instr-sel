*** IR Dump Before Preliminary module verification ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.body, %entry
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.body ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.body, %entry
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.body ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Canonicalize natural loops ***
for.body:                                         ; preds = %for.body, %entry
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end
*** IR Dump Before Canonicalize natural loops ***
for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %for.body.preheader ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %for.body.preheader ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end.loopexit
*** IR Dump Before Loop Strength Reduction ***
for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %for.body.preheader ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %for.body.preheader ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end.loopexit
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %for.body.preheader ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %for.body.preheader ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.end.loopexit ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %for.body.preheader ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %for.body.preheader ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.end.loopexit ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %for.body.preheader ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %for.body.preheader ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.end.loopexit ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Insert stack protectors ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.body ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Preliminary module verification ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.body ]
  ret i32 %res.0.lcssa
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind readnone uwtable
define i32 @fact(i32 %n) #0 {
entry:
  %cmp4 = icmp sgt i32 %n, 0
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.body
  %i.06 = phi i32 [ %dec, %for.body ], [ %n, %entry ]
  %res.05 = phi i32 [ %mul, %for.body ], [ 1, %entry ]
  %mul = mul nsw i32 %i.06, %res.05
  %dec = add nsw i32 %i.06, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi i32 [ 1, %entry ], [ %mul, %for.body ]
  ret i32 %res.0.lcssa
}
# *** IR Dump Before Expand ISel Pseudo-instructions ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
	JMP_4 <BB#1>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
	JMP_4 <BB#1>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
	JMP_4 <BB#1>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
	JMP_4 <BB#1>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %EDI
16B		%vreg5<def> = COPY %EDI; GR32:%vreg5
32B		%vreg6<def> = MOV32ri 1; GR32:%vreg6
48B		TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
64B		JLE_4 <BB#2>, %EFLAGS<imp-use>
80B		JMP_4 <BB#1>
	    Successors according to CFG: BB#1(20) BB#2(12)

96B	BB#1: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#0 BB#1
112B		%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
128B		%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
144B		%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
160B		%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
176B		TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
192B		JG_4 <BB#1>, %EFLAGS<imp-use>
208B		JMP_4 <BB#2>
	    Successors according to CFG: BB#1(124) BB#2(4)

224B	BB#2: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#0 BB#1
240B		%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
256B		%EAX<def> = COPY %vreg4; GR32:%vreg4
272B		RET %EAX

# End machine code for function fact.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
	JMP_4 <BB#1>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
	JMP_4 <BB#1>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
	JMP_4 <BB#1>
    Successors according to CFG: BB#1(20) BB#2(12)

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg5, <BB#0>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#2>, %EFLAGS<imp-use>
    Successors according to CFG: BB#3(20) BB#2(12)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg5, <BB#3>, %vreg3, <BB#1>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#3>, %vreg2, <BB#1>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#1>, %EFLAGS<imp-use>
	JMP_4 <BB#2>
    Successors according to CFG: BB#1(124) BB#2(4)

BB#2: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#1>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#3>, %EFLAGS<imp-use>
    Successors according to CFG: BB#1(20) BB#3(12)

BB#1: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = PHI %vreg5, <BB#1>, %vreg3, <BB#2>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#1>, %vreg2, <BB#2>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#2>, %EFLAGS<imp-use>
	JMP_4 <BB#3>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#2>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function fact: SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI<kill>; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JLE_4 <BB#3>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(20) BB#3(12)

BB#1: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = PHI %vreg5, <BB#1>, %vreg3, <BB#2>; GR32:%vreg0,%vreg5,%vreg3
	%vreg1<def> = PHI %vreg6, <BB#1>, %vreg2, <BB#2>; GR32:%vreg1,%vreg6,%vreg2
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1<kill>, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<kill,tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	JG_4 <BB#2>, %EFLAGS<imp-use,kill>
	JMP_4 <BB#3>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg2, <BB#2>; GR32:%vreg4,%vreg6,%vreg2
	%EAX<def> = COPY %vreg4<kill>; GR32:%vreg4
	RET %EAX<kill>

# End machine code for function fact.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI<kill>; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JG_4 <BB#1>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Predecessors according to CFG: BB#0
	%vreg9<def> = COPY %vreg6<kill>; GR32:%vreg9,%vreg6
	JMP_4 <BB#3>
    Successors according to CFG: BB#3

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg7<def> = COPY %vreg5<kill>; GR32:%vreg7,%vreg5
	%vreg8<def> = COPY %vreg6<kill>; GR32:%vreg8,%vreg6
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = COPY %vreg7<kill>; GR32:%vreg0,%vreg7
	%vreg1<def> = COPY %vreg8<kill>; GR32:%vreg1,%vreg8
	%vreg2<def,tied1> = IMUL32rr %vreg0<tied0>, %vreg1<kill>, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0,%vreg1
	%vreg3<def,tied1> = DEC64_32r %vreg0<kill,tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3,%vreg0
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	%vreg7<def> = COPY %vreg3<kill>; GR32:%vreg7,%vreg3
	%vreg8<def> = COPY %vreg2; GR32:%vreg8,%vreg2
	%vreg9<def> = COPY %vreg2<kill>; GR32:%vreg9,%vreg2
	JG_4 <BB#2>, %EFLAGS<imp-use,kill>
	JMP_4 <BB#3>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#2 BB#4
	%vreg4<def> = COPY %vreg9<kill>; GR32:%vreg4,%vreg9
	%EAX<def> = COPY %vreg4<kill>; GR32:%vreg4
	RET %EAX<kill>

# End machine code for function fact.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%vreg5<def> = COPY %EDI<kill>; GR32:%vreg5
	%vreg6<def> = MOV32ri 1; GR32:%vreg6
	TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
	JG_4 <BB#1>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Predecessors according to CFG: BB#0
	%vreg9<def> = COPY %vreg6<kill>; GR32:%vreg9,%vreg6
	JMP_4 <BB#3>
    Successors according to CFG: BB#3

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg7<def> = COPY %vreg5<kill>; GR32:%vreg7,%vreg5
	%vreg8<def> = COPY %vreg6<kill>; GR32:%vreg8,%vreg6
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = COPY %vreg7<kill>; GR32:%vreg0,%vreg7
	%vreg1<def> = COPY %vreg8<kill>; GR32:%vreg1,%vreg8
	%vreg2<def> = COPY %vreg1<kill>; GR32:%vreg2,%vreg1
	%vreg2<def,tied1> = IMUL32rr %vreg2<tied0>, %vreg0, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0
	%vreg3<def> = COPY %vreg0<kill>; GR32:%vreg3,%vreg0
	%vreg3<def,tied1> = DEC64_32r %vreg3<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3
	TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
	%vreg7<def> = COPY %vreg3<kill>; GR32:%vreg7,%vreg3
	%vreg8<def> = COPY %vreg2; GR32:%vreg8,%vreg2
	%vreg9<def> = COPY %vreg2<kill>; GR32:%vreg9,%vreg2
	JG_4 <BB#2>, %EFLAGS<imp-use,kill>
	JMP_4 <BB#3>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Predecessors according to CFG: BB#2 BB#4
	%vreg4<def> = COPY %vreg9<kill>; GR32:%vreg4,%vreg9
	%EAX<def> = COPY %vreg4<kill>; GR32:%vreg4
	RET %EAX<kill>

# End machine code for function fact.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %EDI
16B		%vreg5<def> = COPY %EDI<kill>; GR32:%vreg5
32B		%vreg6<def> = MOV32ri 1; GR32:%vreg6
48B		TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
64B		JG_4 <BB#1>, %EFLAGS<imp-use,kill>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
96B		%vreg9<def> = COPY %vreg6<kill>; GR32:%vreg9,%vreg6
112B		JMP_4 <BB#3>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
144B		%vreg7<def> = COPY %vreg5<kill>; GR32:%vreg7,%vreg5
160B		%vreg8<def> = COPY %vreg6<kill>; GR32:%vreg8,%vreg6
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
192B		%vreg0<def> = COPY %vreg7<kill>; GR32:%vreg0,%vreg7
208B		%vreg1<def> = COPY %vreg8<kill>; GR32:%vreg1,%vreg8
224B		%vreg2<def> = COPY %vreg1<kill>; GR32:%vreg2,%vreg1
240B		%vreg2<def,tied1> = IMUL32rr %vreg2<tied0>, %vreg0, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0
256B		%vreg3<def> = COPY %vreg0<kill>; GR32:%vreg3,%vreg0
272B		%vreg3<def,tied1> = DEC64_32r %vreg3<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3
288B		TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
304B		%vreg7<def> = COPY %vreg3<kill>; GR32:%vreg7,%vreg3
320B		%vreg8<def> = COPY %vreg2; GR32:%vreg8,%vreg2
336B		%vreg9<def> = COPY %vreg2<kill>; GR32:%vreg9,%vreg2
352B		JG_4 <BB#2>, %EFLAGS<imp-use,kill>
368B		JMP_4 <BB#3>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
400B		%vreg4<def> = COPY %vreg9<kill>; GR32:%vreg4,%vreg9
416B		%EAX<def> = COPY %vreg4<kill>; GR32:%vreg4
432B		RET %EAX<kill>

# End machine code for function fact.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %EDI
16B		%vreg5<def> = COPY %EDI; GR32:%vreg5
32B		%vreg6<def> = MOV32ri 1; GR32:%vreg6
48B		TEST32rr %vreg5, %vreg5, %EFLAGS<imp-def>; GR32:%vreg5
64B		JG_4 <BB#1>, %EFLAGS<imp-use,kill>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
96B		%vreg9<def> = COPY %vreg6; GR32:%vreg9,%vreg6
112B		JMP_4 <BB#3>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
144B		%vreg7<def> = COPY %vreg5; GR32:%vreg7,%vreg5
160B		%vreg8<def> = COPY %vreg6; GR32:%vreg8,%vreg6
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
192B		%vreg0<def> = COPY %vreg7; GR32:%vreg0,%vreg7
208B		%vreg1<def> = COPY %vreg8; GR32:%vreg1,%vreg8
224B		%vreg2<def> = COPY %vreg1; GR32:%vreg2,%vreg1
240B		%vreg2<def,tied1> = IMUL32rr %vreg2<tied0>, %vreg0, %EFLAGS<imp-def,dead>; GR32:%vreg2,%vreg0
256B		%vreg3<def> = COPY %vreg0; GR32:%vreg3,%vreg0
272B		%vreg3<def,tied1> = DEC64_32r %vreg3<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg3
288B		TEST32rr %vreg3, %vreg3, %EFLAGS<imp-def>; GR32:%vreg3
304B		%vreg7<def> = COPY %vreg3; GR32:%vreg7,%vreg3
320B		%vreg8<def> = COPY %vreg2; GR32:%vreg8,%vreg2
336B		%vreg9<def> = COPY %vreg2; GR32:%vreg9,%vreg2
352B		JG_4 <BB#2>, %EFLAGS<imp-use,kill>
368B		JMP_4 <BB#3>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
400B		%vreg4<def> = COPY %vreg9; GR32:%vreg4,%vreg9
416B		%EAX<def> = COPY %vreg4; GR32:%vreg4
432B		RET %EAX<kill>

# End machine code for function fact.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %EDI
16B		%vreg7<def> = COPY %EDI; GR32:%vreg7
32B		%vreg9<def> = MOV32ri 1; GR32:%vreg9
48B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
64B		JG_4 <BB#1>, %EFLAGS<imp-use,kill>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		JMP_4 <BB#3>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
240B		%vreg9<def,tied1> = IMUL32rr %vreg9<tied0>, %vreg7, %EFLAGS<imp-def,dead>; GR32:%vreg9,%vreg7
272B		%vreg7<def,tied1> = DEC64_32r %vreg7<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg7
288B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
352B		JG_4 <BB#2>, %EFLAGS<imp-use,kill>
368B		JMP_4 <BB#3>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
416B		%EAX<def> = COPY %vreg9; GR32:%vreg9
432B		RET %EAX<kill>

# End machine code for function fact.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %EDI
16B		%vreg7<def> = COPY %EDI; GR32:%vreg7
32B		%vreg9<def> = MOV32ri 1; GR32:%vreg9
48B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
64B		JG_4 <BB#1>, %EFLAGS<imp-use,kill>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		JMP_4 <BB#3>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
240B		%vreg9<def,tied1> = IMUL32rr %vreg9<tied0>, %vreg7, %EFLAGS<imp-def,dead>; GR32:%vreg9,%vreg7
272B		%vreg7<def,tied1> = DEC64_32r %vreg7<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg7
288B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
352B		JG_4 <BB#2>, %EFLAGS<imp-use,kill>
368B		JMP_4 <BB#3>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
416B		%EAX<def> = COPY %vreg9; GR32:%vreg9
432B		RET %EAX<kill>

# End machine code for function fact.

# *** IR Dump Before Calculate spill weights ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %EDI
16B		%vreg7<def> = COPY %EDI; GR32:%vreg7
32B		%vreg9<def> = MOV32ri 1; GR32:%vreg9
48B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
64B		JG_4 <BB#1>, %EFLAGS<imp-use,kill>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		JMP_4 <BB#3>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
240B		%vreg9<def,tied1> = IMUL32rr %vreg9<tied0>, %vreg7, %EFLAGS<imp-def,dead>; GR32:%vreg9,%vreg7
272B		%vreg7<def,tied1> = DEC64_32r %vreg7<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg7
288B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
352B		JG_4 <BB#2>, %EFLAGS<imp-use,kill>
368B		JMP_4 <BB#3>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
416B		%EAX<def> = COPY %vreg9; GR32:%vreg9
432B		RET %EAX<kill>

# End machine code for function fact.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %EDI
16B		%vreg7<def> = COPY %EDI; GR32:%vreg7
32B		%vreg9<def> = MOV32ri 1; GR32:%vreg9
48B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
64B		JG_4 <BB#1>, %EFLAGS<imp-use,kill>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		JMP_4 <BB#3>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
240B		%vreg9<def,tied1> = IMUL32rr %vreg9<tied0>, %vreg7, %EFLAGS<imp-def,dead>; GR32:%vreg9,%vreg7
272B		%vreg7<def,tied1> = DEC64_32r %vreg7<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg7
288B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
352B		JG_4 <BB#2>, %EFLAGS<imp-use,kill>
368B		JMP_4 <BB#3>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
416B		%EAX<def> = COPY %vreg9; GR32:%vreg9
432B		RET %EAX<kill>

# End machine code for function fact.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %EDI
16B		%vreg7<def> = COPY %EDI; GR32:%vreg7
32B		%vreg9<def> = MOV32ri 1; GR32:%vreg9
48B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
64B		JG_4 <BB#1>, %EFLAGS<imp-use,kill>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		JMP_4 <BB#3>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
240B		%vreg9<def,tied1> = IMUL32rr %vreg9<tied0>, %vreg7, %EFLAGS<imp-def,dead>; GR32:%vreg9,%vreg7
272B		%vreg7<def,tied1> = DEC64_32r %vreg7<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg7
288B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
352B		JG_4 <BB#2>, %EFLAGS<imp-use,kill>
368B		JMP_4 <BB#3>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
416B		%EAX<def> = COPY %vreg9; GR32:%vreg9
432B		RET %EAX<kill>

# End machine code for function fact.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %EDI
16B		%vreg7<def> = COPY %EDI; GR32:%vreg7
32B		%vreg9<def> = MOV32ri 1; GR32:%vreg9
48B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
64B		JG_4 <BB#1>, %EFLAGS<imp-use,kill>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Predecessors according to CFG: BB#0
112B		JMP_4 <BB#3>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Predecessors according to CFG: BB#2 BB#1
240B		%vreg9<def,tied1> = IMUL32rr %vreg9<tied0>, %vreg7, %EFLAGS<imp-def,dead>; GR32:%vreg9,%vreg7
272B		%vreg7<def,tied1> = DEC64_32r %vreg7<tied0>, %EFLAGS<imp-def,dead>; GR32:%vreg7
288B		TEST32rr %vreg7, %vreg7, %EFLAGS<imp-def>; GR32:%vreg7
352B		JG_4 <BB#2>, %EFLAGS<imp-use,kill>
368B		JMP_4 <BB#3>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#3: derived from LLVM BB %for.end
	    Predecessors according to CFG: BB#2 BB#4
416B		%EAX<def> = COPY %vreg9; GR32:%vreg9
432B		RET %EAX

# End machine code for function fact.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %EDI
32B		%EAX<def> = MOV32ri 1
48B		TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
64B		JG_4 <BB#1>, %EFLAGS<imp-use,kill>
	    Successors according to CFG: BB#1(20) BB#4(12)

80B	BB#4: 
	    Live Ins: %EAX
	    Predecessors according to CFG: BB#0
112B		JMP_4 <BB#3>
	    Successors according to CFG: BB#3

128B	BB#1: 
	    Live Ins: %EDI %EAX
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2

176B	BB#2: derived from LLVM BB %for.body
	    Live Ins: %EDI %EAX
	    Predecessors according to CFG: BB#2 BB#1
240B		%EAX<def,tied1> = IMUL32rr %EAX<kill,tied0>, %EDI, %EFLAGS<imp-def,dead>
272B		%EDI<def,tied1> = DEC64_32r %EDI<kill,tied0>, %EFLAGS<imp-def,dead>
288B		TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
352B		JG_4 <BB#2>, %EFLAGS<imp-use,kill>
368B		JMP_4 <BB#3>
	    Successors according to CFG: BB#2(124) BB#3(4)

384B	BB#3: derived from LLVM BB %for.end
	    Live Ins: %EAX
	    Predecessors according to CFG: BB#2 BB#4
432B		RET %EAX

# End machine code for function fact.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%EAX<def> = MOV32ri 1
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#1>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Live Ins: %EAX
    Predecessors according to CFG: BB#0
	JMP_4 <BB#3>
    Successors according to CFG: BB#3

BB#1: 
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#2 BB#1
	%EAX<def,tied1> = IMUL32rr %EAX<kill,tied0>, %EDI, %EFLAGS<imp-def,dead>
	%EDI<def,tied1> = DEC64_32r %EDI<kill,tied0>, %EFLAGS<imp-def,dead>
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#2>, %EFLAGS<imp-use,kill>
	JMP_4 <BB#3>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %EAX
    Predecessors according to CFG: BB#2 BB#4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%EAX<def> = MOV32ri 1
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#1>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Live Ins: %EAX
    Predecessors according to CFG: BB#0
	JMP_4 <BB#3>
    Successors according to CFG: BB#3

BB#1: 
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#2 BB#1
	%EAX<def,tied1> = IMUL32rr %EAX<kill,tied0>, %EDI, %EFLAGS<imp-def,dead>
	%EDI<def,tied1> = DEC64_32r %EDI<kill,tied0>, %EFLAGS<imp-def,dead>
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#2>, %EFLAGS<imp-use,kill>
	JMP_4 <BB#3>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %EAX
    Predecessors according to CFG: BB#2 BB#4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function fact: Post SSA
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%EAX<def> = MOV32ri 1
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#1>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(20) BB#4(12)

BB#4: 
    Live Ins: %EAX
    Predecessors according to CFG: BB#0
	JMP_4 <BB#3>
    Successors according to CFG: BB#3

BB#1: 
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#2 BB#1
	%EAX<def,tied1> = IMUL32rr %EAX<kill,tied0>, %EDI, %EFLAGS<imp-def,dead>
	%EDI<def,tied1> = DEC64_32r %EDI<kill,tied0>, %EFLAGS<imp-def,dead>
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#2>, %EFLAGS<imp-use,kill>
	JMP_4 <BB#3>
    Successors according to CFG: BB#2(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %EAX
    Predecessors according to CFG: BB#2 BB#4
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function fact: Post SSA, not tracking liveness
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%EAX<def> = MOV32ri 1
	JMP_4 <BB#2>
    Successors according to CFG: BB#2

BB#1: derived from LLVM BB %for.body
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#2
	%EAX<def,tied1> = IMUL32rr %EAX<kill,tied0>, %EDI, %EFLAGS<imp-def,dead>
	%EDI<def,tied1> = DEC64_32r %EDI<kill,tied0>, %EFLAGS<imp-def,dead>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#0
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#1>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %EAX
    Predecessors according to CFG: BB#2
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function fact: Post SSA, not tracking liveness
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%EAX<def> = MOV32ri 1
	JMP_4 <BB#2>
    Successors according to CFG: BB#2

BB#1: derived from LLVM BB %for.body
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#2
	%EAX<def,tied1> = IMUL32rr %EAX<kill,tied0>, %EDI, %EFLAGS<imp-def,dead>
	%EDI<def,tied1> = DEC64_32r %EDI<kill,tied0>, %EFLAGS<imp-def,dead>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#0
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#1>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %EAX
    Predecessors according to CFG: BB#2
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function fact: Post SSA, not tracking liveness
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%EAX<def> = MOV32ri 1
	JMP_4 <BB#2>
    Successors according to CFG: BB#2

BB#1: derived from LLVM BB %for.body
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#2
	%EAX<def,tied1> = IMUL32rr %EAX<kill,tied0>, %EDI, %EFLAGS<imp-def,dead>
	%EDI<def,tied1> = DEC64_32r %EDI<kill,tied0>, %EFLAGS<imp-def,dead>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#0
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#1>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %EAX
    Predecessors according to CFG: BB#2
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function fact: Post SSA, not tracking liveness
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%EAX<def> = MOV32ri 1
	JMP_4 <BB#2>
    Successors according to CFG: BB#2

BB#1: derived from LLVM BB %for.body
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#2
	%EAX<def,tied1> = IMUL32rr %EAX<kill,tied0>, %EDI, %EFLAGS<imp-def,dead>
	%EDI<def,tied1> = DEC64_32r %EDI<kill,tied0>, %EFLAGS<imp-def,dead>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#0
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#1>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %EAX
    Predecessors according to CFG: BB#2
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function fact: Post SSA, not tracking liveness
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%EAX<def> = MOV32ri 1
	JMP_4 <BB#2>
    Successors according to CFG: BB#2

BB#1: derived from LLVM BB %for.body
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#2
	%EAX<def,tied1> = IMUL32rr %EAX<kill,tied0>, %EDI, %EFLAGS<imp-def,dead>
	%EDI<def,tied1> = DEC64_32r %EDI<kill,tied0>, %EFLAGS<imp-def,dead>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#0
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#1>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %EAX
    Predecessors according to CFG: BB#2
	RET %EAX

# End machine code for function fact.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function fact: Post SSA, not tracking liveness
Function Live Ins: %EDI in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI
	%EAX<def> = MOV32ri 1
	JMP_4 <BB#2>
    Successors according to CFG: BB#2

BB#1: derived from LLVM BB %for.body
    Live Ins: %EDI %EAX
    Predecessors according to CFG: BB#2
	%EAX<def,tied1> = IMUL32rr %EAX<kill,tied0>, %EDI, %EFLAGS<imp-def,dead>
	%EDI<def,tied1> = DEC64_32r %EDI<kill,tied0>, %EFLAGS<imp-def,dead>
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %for.body
    Predecessors according to CFG: BB#1 BB#0
	TEST32rr %EDI, %EDI, %EFLAGS<imp-def>
	JG_4 <BB#1>, %EFLAGS<imp-use,kill>
    Successors according to CFG: BB#1(124) BB#3(4)

BB#3: derived from LLVM BB %for.end
    Live Ins: %EAX
    Predecessors according to CFG: BB#2
	RET %EAX

# End machine code for function fact.

*** IR Dump Before Preliminary module verification ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Insert stack protectors ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Preliminary module verification ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind readnone uwtable
define i32 @main() #0 {
entry:
  %call = tail call i32 @fact(i32 10)
  ret i32 %call
}
# *** IR Dump Before Expand ISel Pseudo-instructions ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function main: SSA

0B	BB#0: derived from LLVM BB %entry
16B		%vreg0<def> = MOV32ri 10; GR32:%vreg0
32B		%EDI<def> = COPY %vreg0; GR32:%vreg0
48B		TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use>

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function main: SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0<kill>; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function main: Post SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0<kill>; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: Post SSA

BB#0: derived from LLVM BB %entry
	%vreg0<def> = MOV32ri 10; GR32:%vreg0
	%EDI<def> = COPY %vreg0<kill>; GR32:%vreg0
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
16B		%vreg0<def> = MOV32ri 10; GR32:%vreg0
32B		%EDI<def> = COPY %vreg0<kill>; GR32:%vreg0
48B		TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
16B		%vreg0<def> = MOV32ri 10; GR32:%vreg0
32B		%EDI<def> = COPY %vreg0; GR32:%vreg0
48B		TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
32B		%EDI<def> = MOV32ri 10
48B		TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
32B		%EDI<def> = MOV32ri 10
48B		TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Calculate spill weights ***:
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
32B		%EDI<def> = MOV32ri 10
48B		TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
32B		%EDI<def> = MOV32ri 10
48B		TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
32B		%EDI<def> = MOV32ri 10
48B		TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
32B		%EDI<def> = MOV32ri 10
48B		TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function main: Post SSA

0B	BB#0: derived from LLVM BB %entry
32B		%EDI<def> = MOV32ri 10
48B		TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: Post SSA

BB#0: derived from LLVM BB %entry
	%EDI<def> = MOV32ri 10
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: Post SSA

BB#0: derived from LLVM BB %entry
	%EDI<def> = MOV32ri 10
	TCRETURNdi64 <ga:@fact>, 0, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function main: Post SSA

BB#0: derived from LLVM BB %entry
	%EDI<def> = MOV32ri 10
	TAILJMPd64 <ga:@fact>, %RSP<imp-use>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: Post SSA, not tracking liveness

BB#0: derived from LLVM BB %entry
	%EDI<def> = MOV32ri 10
	TAILJMPd64 <ga:@fact>, %RSP<imp-use>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: Post SSA, not tracking liveness

BB#0: derived from LLVM BB %entry
	%EDI<def> = MOV32ri 10
	TAILJMPd64 <ga:@fact>, %RSP<imp-use>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: Post SSA, not tracking liveness

BB#0: derived from LLVM BB %entry
	%EDI<def> = MOV32ri 10
	TAILJMPd64 <ga:@fact>, %RSP<imp-use>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function main: Post SSA, not tracking liveness

BB#0: derived from LLVM BB %entry
	%EDI<def> = MOV32ri 10
	TAILJMPd64 <ga:@fact>, %RSP<imp-use>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: Post SSA, not tracking liveness

BB#0: derived from LLVM BB %entry
	%EDI<def> = MOV32ri 10
	TAILJMPd64 <ga:@fact>, %RSP<imp-use>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function main: Post SSA, not tracking liveness

BB#0: derived from LLVM BB %entry
	%EDI<def> = MOV32ri 10
	TAILJMPd64 <ga:@fact>, %RSP<imp-use>, %RSP<imp-use>, %EDI<imp-use,kill>

# End machine code for function main.

