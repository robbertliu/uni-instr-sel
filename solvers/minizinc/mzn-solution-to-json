#!/usr/bin/python

# Copyright (c) 2013-2015, Gabriel Hjort Blindell <ghb@kth.se>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.



#=========
# IMPORTS
#=========

import json
import os.path
import sys



#================
# HELP FUNCTIONS
#================

def error(msg):
    sys.stderr.write("ERROR: " + msg + "\n")
    sys.exit(1)

def extractData(line):
    pos = line.find("=")
    if pos < 0:
        raise SyntaxError("Expected '=' not found")
    name = line[:pos].strip()
    data = toValue(line[pos + 1:].strip())
    return name, data

def toValue(s):
    s = s.strip()
    if len(s) == 0:
        raise SyntaxError("No data")
    if s[0] == '[':
        if not s[-1] == ']':
            raise SyntaxError("Expected ']' not found")
        values = []
        for t in s[1:-1].split(','):
            if len(t) == 0:
                continue
            values.append(toValue(t))
        return values
    else:
        if s == "true":
            return True
        elif s == "false":
            return False
        elif s.isdigit() or (s.startswith("-") and s[1:].isdigit()):
            return int(s)
        else:
            return s

def consistsOnlyOf(s, ch):
    for c in s:
        if c != ch:
            return False
    return True

def getDataByName(data, name):
    for d in data:
        if d[0] == name:
            return d[1]

def getRequiredDataByName(data, name):
    d = getDataByName(data, name)
    if d == None:
        error("Required data '" + name + "' not found")
    return d



#=============
# MAIN SCRIPT
#=============

# Check solution file
if len(sys.argv) < 2:
    sys.stderr.write("No solution file\n")
    sys.exit(1)
if len(sys.argv) > 2:
    sys.stderr.write("Too many arguments\n")
    sys.exit(1)
solution_file = sys.argv[1]
if not os.path.isfile(solution_file):
    error("Solution file '" + solution_file +"' not found")

# Read solution file
content = []
with open(solution_file, 'r') as file:
    content = file.readlines()

# Report error if the model was unsatisfiable
first_line = content[0].strip()
if first_line == "=====UNSATISFIABLE=====":
    error("No solution found because model was reported as unsatisfiable")

# Check if no solution was found
if first_line == "=====UNBOUNDED=====" or first_line == "=====UNKNOWN=====":
    print json.dumps({"has-solution": False})
    sys.exit(0)

# Extract data
all_data = []
found_optimal=False
for i in range(len(content)):
    linenr = str(i + 1)
    line = content[i].strip()
    if line[0] == '%':
        continue
    if len(line) == 0 or consistsOnlyOf(line, '-'):
        continue
    if consistsOnlyOf(line, '='):
        found_optimal=True
        continue
    try:
        name, data = extractData(line)
    except SyntaxError as e:
        error("Line " + linenr + ": " + str(e))
    if getDataByName(all_data, name) != None:
        error("Line " + linenr + ": Duplicate entries with name '" + name + "'")
    all_data.append([name, data])
all_data.append(["optimal", found_optimal])

# Add, modify, or remove certain data in order to facilitate postprocessing

# Construct block order data from block successor data
succ_data = getRequiredDataByName(all_data, "succ")
null_label = getRequiredDataByName(all_data, "label_value_for_null")
try:
    null_label = int(null_label)
except ValueError:
    error("Value of 'label_value_for_null' is not an int")
if null_label < 0 or null_label >= len(succ_data):
    error("Value of 'label_value_for_null' is out of bounds")
ord_data = [succ_data[null_label]]
while succ_data[ord_data[-1]] != null_label:
    ord_data.append(succ_data[ord_data[-1]])
all_data.append(["ord", ord_data])

# Add 'has_d_loc' array to data
loc_data = getRequiredDataByName(all_data, "loc")
loc_value_for_null = \
  getRequiredDataByName(all_data, "loc_value_for_null")
has_d_loc_data = []
for loc in loc_data:
    has_d_loc_data.append(loc != loc_value_for_null)
all_data.append(["has_d_loc", has_d_loc_data])

# Turn desirable data into JSON
data_table = [ ["loc",        "loc-of-dnode"]
             , ["has_d_loc",  "has-dnode-loc"]
             , ["sel",        "is-match-selected"]
             , ["mov",        "bb-of-match"]
             , ["ord",        "order-of-bbs"]
             , ["cost",       "cost"]
             , ["optimal",    "is-solution-optimal"]
             ]
keep_table = [ d[0] for d in data_table ]
replace_table = [ d[1] for d in data_table ]
json_data = {}
for d in all_data:
    name = d[0]
    for i in range(len(keep_table)):
        if name == keep_table[i]:
            json_data[replace_table[i]] = d[1]
            del keep_table[i]
            del replace_table[i]
            break

# Add additional field indicating that this is a solution
json_data["has-solution"] = True

if len(keep_table) > 0:
    error("Required data '" + keep_table[0] + "' not found")

# Print JSON
print json.dumps(json_data)
