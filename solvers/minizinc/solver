#!/bin/bash

# Copyright (c) 2013-2015, Gabriel Hjort Blindell <ghb@kth.se>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



#==========
# SETTINGS
#==========

# Find the path to this directory (even through symbolic links)
# (from http://stackoverflow.com/a/246128/426092)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # Resolve $SOURCE until the file is no longer a
                           # symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative
                                               # symlink, we need to resolve it
                                               # relative to the path where the
                                               # symlink file was located
done
THIS_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

MINIZINC_PARAMS_FILENAME="params.mzn"
MINIZINC_FULL_MODEL_FILENAME="full-model.mzn"
MINIZINC_SOLUTION_FILENAME="full-model.szn"
MINIZINC_BASE_MODEL_FILEPATH="$THIS_DIR/base-model.mzn"
MINIZINC_ERROR_FILENAME="error.log"

# These will be set after parsing command-line arguments
JSON_INPUT_FILEPATH=""
JSON_OUTPUT_FILEPATH=""
TMP_DIR=""
MINIZINC_PARAMS_FILEPATH=""
MINIZINC_FULL_MODEL_FILEPATH=""
MINIZINC_SOLUTION_FILEPATH=""
MINIZINC_ERROR_FILEPATH=""
MINIZINC_SOLVER_BIN=""
MINIZINC_TIMELIMIT=""



#================
# HELP FUNCTIONS
#================

function echoerr {
    echo "ERROR: $@" 1>&2
}

function exe {
    echo "  Executing: $@";
    eval "$@";
}

function exitIfFailed {
    if [[ $? != 0 ]]; then
        if [ ! -z "$@" ]; then
            echoerr "$@"
        fi
        exit 1
    fi
}

function ensureFileExists {
    if [ ! -f "$@" ]; then
        echoerr "Required file \"$@\" does not exist"
        exit 1
    fi
}

function reportTask {
    echo "* $@..."
}

function reportNewEntity {
    echo "  Created: $@"
}

function flattenModelFile {
    # It is assumed that the working directory is where the MZN file is
    fzn_filepath="${MINIZINC_FULL_MODEL_FILEPATH%.*}.fzn"
    reportTask "Flattening MiniZinc model file"
    exe "mzn2fzn ${MINIZINC_FULL_MODEL_FILEPATH##*/}"
    exitIfFailed ""
    reportNewEntity $fzn_filepath
    reportNewEntity ${MINIZINC_FULL_MODEL_FILEPATH%.*}.ozn
}

function inflateSolutionFile {
    # It is assumed that the working directory is where the FZN and OZN files
    # are
    szn_filepath="${MINIZINC_FULL_MODEL_FILEPATH%.*}.szn"
    ozn_filepath="${MINIZINC_FULL_MODEL_FILEPATH%.*}.ozn"
    tmp_file="$MINIZINC_SOLUTION_FILEPATH.tmp"
    reportTask "Inflating MiniZinc solution file"
    exe "solns2out ${ozn_filepath##*/} ${szn_filepath##*/} > $tmp_file"
    exitIfFailed ""
    exe "mv $tmp_file $MINIZINC_SOLUTION_FILEPATH"
    exitIfFailed ""
    reportNewEntity $MINIZINC_SOLUTION_FILEPATH
}

function executeSolver {
    working_dir=`pwd`
    cd $TMP_DIR

    # Flatten model, if necessary
    if [[ $MINIZINC_SOLVER_BIN == fzn* ]]; then
        flattenModelFile
    fi

    reportTask "Running solver"
    command=""
    if [[ $MINIZINC_TIMELIMIT > 0 ]]; then
        command="timeout ${MINIZINC_TIMELIMIT}s"
    fi
    command="$command $MINIZINC_SOLVER_BIN -s"
    if [[ $MINIZINC_SOLVER_BIN == fzn* ]]; then
        command="$command ${MINIZINC_FULL_MODEL_FILENAME%.*}.fzn"
    else
        command="$command $MINIZINC_FULL_MODEL_FILENAME"
    fi
    command="$command > $MINIZINC_SOLUTION_FILEPATH"
    command="$command 2> $MINIZINC_ERROR_FILEPATH"
    exe "$command"
    if [[ $? == 124 ]]; then
        # Solver timed out
        $( exit 0 )
    fi
    error_msg=`cat $MINIZINC_ERROR_FILEPATH`
    exitIfFailed $error_msg
    reportNewEntity $MINIZINC_SOLUTION_FILEPATH

    # Inflate solution, if necessary
    if [[ $MINIZINC_SOLVER_BIN == fzn* ]]; then
        inflateSolutionFile
    fi

    cd $working_dir
}



#=============
# MAIN SCRIPT
#=============

# Parse arguments
while [[ $# > 1 ]]
do
    key="$1"

    case $key in
        -o|--output)
            JSON_OUTPUT_FILEPATH="$2"
            shift
        ;;
        -s|--solver)
            MINIZINC_SOLVER_BIN="$2"
            shift
        ;;
        -t|--timelimit)
            MINIZINC_TIMELIMIT="$2"
            shift
        ;;
        *)
            echoerr "Unknown argument switch '$1'"
            exit 1
        ;;
    esac
    shift
done
if [[ $# == 1 ]]; then
    JSON_INPUT_FILEPATH="$1"
fi
if [ -z $MINIZINC_TIMELIMIT ]; then
    MINIZINC_TIMELIMIT=0
fi

# Check arguments
if [ -z $JSON_INPUT_FILEPATH ]; then
    echoerr "No JSON input file provided (must be last argument)"
    exit 1
else
    ensureFileExists $JSON_INPUT_FILEPATH
fi
if [ -z $JSON_OUTPUT_FILEPATH ]; then
    echoerr "No JSON output file provided (use -o or --output switch)"
    exit 1
fi
if [ -z $MINIZINC_SOLVER_BIN ]; then
    echoerr "No solver specified (use -s or --solver switch)"
    exit 1
fi

reportTask "Creating temporary directory"
TMP_DIR=`mktemp -d`
if [ ! -d "$TMP_DIR" ]; then
    echoerr "Failed to create temporary directory"
fi
reportNewEntity $TMP_DIR

# Set filepath variables
MINIZINC_PARAMS_FILEPATH="$TMP_DIR/$MINIZINC_PARAMS_FILENAME"
MINIZINC_FULL_MODEL_FILEPATH="$TMP_DIR/$MINIZINC_FULL_MODEL_FILENAME"
MINIZINC_SOLUTION_FILEPATH="$TMP_DIR/$MINIZINC_SOLUTION_FILENAME"
MINIZINC_ERROR_FILEPATH="$TMP_DIR/$MINIZINC_ERROR_FILENAME"

reportTask "Generating MiniZinc parameter file"
exe "$THIS_DIR/mzn-params-gen $JSON_INPUT_FILEPATH" \
    " > $MINIZINC_PARAMS_FILEPATH"
exitIfFailed ""
reportNewEntity $MINIZINC_PARAMS_FILEPATH

reportTask "Creating MiniZinc model file"
exe "cat $MINIZINC_BASE_MODEL_FILEPATH > $MINIZINC_FULL_MODEL_FILEPATH"
exitIfFailed ""
echo >> $MINIZINC_FULL_MODEL_FILEPATH
echo >> $MINIZINC_FULL_MODEL_FILEPATH
echo >> $MINIZINC_FULL_MODEL_FILEPATH
exe "cat $MINIZINC_PARAMS_FILEPATH >> $MINIZINC_FULL_MODEL_FILEPATH"
exitIfFailed ""
reportNewEntity $MINIZINC_FULL_MODEL_FILEPATH

executeSolver

reportTask "Converting MiniZinc solution to JSON format"
exe "$THIS_DIR/mzn-solution-to-json $MINIZINC_SOLUTION_FILEPATH" \
    " > $JSON_OUTPUT_FILEPATH"
exitIfFailed ""
reportNewEntity $JSON_OUTPUT_FILEPATH

reportTask "Cleaning up temporary files"
exe "rm -rf $TMP_DIR"
exitIfFailed ""
