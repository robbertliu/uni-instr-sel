#!/bin/bash

# Copyright (c) 2013-2015, Gabriel Hjort Blindell <ghb@kth.se>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



#==========
# SETTINGS
#==========

# Find the path to this directory (even through symbolic links)
# (from http://stackoverflow.com/a/246128/426092)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # Resolve $SOURCE until the file is no longer a
                           # symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative
                                               # symlink, we need to resolve it
                                               # relative to the path where the
                                               # symlink file was located
done
THIS_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

MINIZINC_PARAMS_FILENAME="params.mzn"
MINIZINC_OUTPUT_FILENAME="model.sol.mzn"
MINIZINC_FULL_MODEL_FILENAME="full-model.mzn"
MINIZINC_BASE_MODEL_FILEPATH="$THIS_DIR/base-model.mzn"

# These will be set after parsing command-line arguments
MODEL_PARAMS_FILEPATH=""
JSON_OUTPUT_FILEPATH=""
TMP_DIR=""
MINIZINC_PARAMS_FILEPATH=""
MINIZINC_FULL_MODEL_FILEPATH=""
MINIZINC_OUTPUT_FILEPATH=""



#================
# HELP FUNCTIONS
#================

function echoerr {
    echo "$@" 1>&2
}

function exe {
    echo "  Executing: $@";
    eval "$@";
}

function exitIfFailed {
    if [ $? -ne 0 ]; then
        exit 1
    fi
}

function ensureFileExists {
    if [ ! -f "$@" ]; then
        echoerr "Required file \"$@\" does not exist"
        exit 1
    fi
}

function reportNewEntity {
    echo "  Created: $@"
}



#=============
# MAIN SCRIPT
#=============

# Check arguments
if [ $# -gt 3 ]; then
    echoerr "Too many input arguments"
    exit 1
fi
if [ "$1" == "-o" ]; then
    if [ -z "$2" ]; then
        echoerr "'-o' requires an argument"
        exit 1
    fi
    JSON_OUTPUT_FILEPATH=$2
    if [ -z "$3" ]; then
        echoerr "No model params file provided"
        exit 1
    fi
    MODEL_PARAMS_FILEPATH=$3
else
    echoerr "No '-o' option provided (must be first)"
    exit 1
fi

echo "* Creating temporary directory..."
TMP_DIR=`mktemp -d`
if [ ! -d "$TMP_DIR" ]; then
    echoerr "Failed to create temporary directory"
fi
reportNewEntity $TMP_DIR

# Set filepath variables
MINIZINC_PARAMS_FILEPATH="$TMP_DIR/$MINIZINC_PARAMS_FILENAME"
MINIZINC_FULL_MODEL_FILEPATH="$TMP_DIR/$MINIZINC_FULL_MODEL_FILENAME"
MINIZINC_OUTPUT_FILEPATH="$TMP_DIR/$MINIZINC_OUTPUT_FILENAME"

echo "* Generating MiniZinc parameter file..."
exe "$THIS_DIR/mzn-params-gen $MODEL_PARAMS_FILEPATH" \
    "  > $MINIZINC_PARAMS_FILEPATH"
exitIfFailed
reportNewEntity $MINIZINC_PARAMS_FILEPATH

echo "* Creating MiniZinc model file..."
ensureFileExists $MINIZINC_PARAMS_FILEPATH
exe "cat $MINIZINC_BASE_MODEL_FILEPATH > $MINIZINC_FULL_MODEL_FILEPATH"
exitIfFailed
ensureFileExists $MINIZINC_FULL_MODEL_FILEPATH
echo >> $MINIZINC_FULL_MODEL_FILEPATH
echo >> $MINIZINC_FULL_MODEL_FILEPATH
echo >> $MINIZINC_FULL_MODEL_FILEPATH
exe "cat $MINIZINC_PARAMS_FILEPATH >> $MINIZINC_FULL_MODEL_FILEPATH"
exitIfFailed
reportNewEntity $MINIZINC_FULL_MODEL_FILEPATH

echo "* Running MiniZinc solver..."
exe "minizinc $MINIZINC_FULL_MODEL_FILEPATH > $MINIZINC_OUTPUT_FILEPATH" \
    "  2> /dev/null"
STATUS=$?
if [ $STATUS -ne 0 ]; then
    echoerr "minizinc exited with failure"
    exit 1
fi
reportNewEntity $MINIZINC_OUTPUT_FILEPATH

echo "* Converting MiniZinc solution to JSON format..."
ensureFileExists $MINIZINC_OUTPUT_FILEPATH
exe "$THIS_DIR/mzn-solution-to-json $MINIZINC_OUTPUT_FILEPATH" \
    "  > $JSON_OUTPUT_FILEPATH"
exitIfFailed
ensureFileExists $JSON_OUTPUT_FILEPATH
reportNewEntity $JSON_OUTPUT_FILEPATH

echo "* Cleaning up temporary files..."
exe "rm -rf $TMP_DIR"
exitIfFailed
