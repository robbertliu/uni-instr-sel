#!/usr/bin/python

#  Main authors:
#    Gabriel Hjort Blindell <ghb@kth.se>
#
#  Copyright (c) 2012-2017, Gabriel Hjort Blindell <ghb@kth.se>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



#=========
# IMPORTS
#=========

import json
import os.path
import sys
from itertools import groupby



#================
# HELP FUNCTIONS
#================

def error(msg):
    sys.stderr.write("ERROR: " + msg + "\n")
    sys.exit(1)



#=============
# MAIN SCRIPT
#=============

# Check files
if len(sys.argv) < 2:
    sys.stderr.write("No JSON file given\n")
    sys.exit(1)
if len(sys.argv) > 2:
    sys.stderr.write("Too many arguments\n")
    sys.exit(1)
json_file = sys.argv[1]
if not os.path.isfile(json_file):
    error("JSON file '" + json_file + "' not found")

# Read JSON file
json_data = []
with open(json_file, 'r') as file:
    json_data = json.load(file)

# Assign a unique tags for each reference to a location
tag = 0
loc_tag = []
for key, group in groupby(json_data["fun-valid-value-locs"], lambda x: x[0]):
    loc_tag.extend([[r[1], tag] for r in group])
    tag = tag+1
for key, group in groupby( json_data["match-valid-value-locs"]
                         , lambda x: [x[0], x[1]]
                         ):
    loc_tag.extend([[r[2], tag] for r in group])
    tag = tag+1
for row in json_data["fun-valid-value-loc-ranges"]:
    loc_tag.extend([[l, tag] for l in range(r[2], r[3]+1)])
    tag = tag+1
for row in json_data["match-valid-value-loc-ranges"]:
    loc_tag.extend([[l, tag] for l in range(row[2], row[3]+1)])
    tag = tag+1

# Gather tags for each location
tags_loc = []
loc_tag.sort();
for key, group in groupby(loc_tag, lambda x: x[0]):
    tags_loc.append([[r[1] for r in group], key])

# Select canonical location value for each group of tags (the selected value is
# the first value in the first group, which is assumed to be sorted)
tags_loc.sort();
canonical_locs = []
for key, group in groupby(tags_loc, lambda x: x[0]):
    canonical_locs.append(list(group)[0][1])
canonical_locs = set(canonical_locs)

# Filter fun-valid-value-locs and match-valid-value-locs w.r.t. canonical_locs
new_fun_valid_value_locs = []
new_match_valid_value_locs = []
for row in json_data["fun-valid-value-locs"]:
    if row[1] in canonical_locs:
        new_fun_valid_value_locs.append(row)
for row in json_data["match-valid-value-locs"]:
    if row[2] in canonical_locs:
        new_match_valid_value_locs.append(row)

# Update JSON content
json_data["fun-valid-value-locs"] = new_fun_valid_value_locs
json_data["match-valid-value-locs"] = new_match_valid_value_locs
json_data["canonical-locs"] = list(canonical_locs)

# Print JSON
print json.dumps(json_data)
