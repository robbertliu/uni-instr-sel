#!/usr/bin/python

#  Main authors:
#    Gabriel Hjort Blindell <ghb@kth.se>
#
#  Copyright (c) 2012-2016, Gabriel Hjort Blindell <ghb@kth.se>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



#=========
# IMPORTS
#=========

import json
import sexparser
import os.path
import sys
import fractions


#================
# HELP FUNCTIONS
#================

def error(msg):
    sys.stderr.write("ERROR: " + msg + "\n")
    sys.exit(1)

def bumpArrOfSing(json):
    output = []
    for d in json:
        if d is None:
            output.append(d)
        else:
            output.append(d+1)
    return output

def bumpArr(json):
    return [ x+1 for x in json ]

def bumpArrOfArr(json):
    return [ bumpArr(x) for x in json ]

def bump2DArrYY(json):
    return [ [x[0]+1, x[1]+1] for x in json ]

def bump2DArrYYY(json):
    return [ [x[0]+1, x[1]+1, x[2]+1] for x in json ]

def bump2DArrYYN(json):
    return [ [x[0]+1, x[1]+1, x[2]] for x in json ]

def bump2DArrYYNN(json):
    return [ [x[0]+1, x[1]+1, x[2], x[3]] for x in json ]

VT_PLAIN = 0
VT_ARRAY1D = 1
VT_ARRAY2D = 2
VT_SET = 3
VT_ARRAY = 4
VC_AS_IS = 0
VC_SET = 1
VC_SINGLETON = 2
def dumpParams(
    json,
    var_name,
    var_type = VT_PLAIN,
    var_range = "",
    var_conv = VC_AS_IS
):
    sys.stdout.write(var_name)
    sys.stdout.write(" = ")
    if var_type == VT_PLAIN:
        sys.stdout.write(convData(json, var_conv))
    elif var_type == VT_ARRAY:
        sys.stdout.write("[")
        lst = ", ".join([ convData(d, var_conv) for d in json ])
        sys.stdout.write(lst)
        sys.stdout.write("]")

    elif var_type == VT_ARRAY1D:
        sys.stdout.write("array1d(")
        sys.stdout.write(var_range)
        sys.stdout.write(", [")
        lst = ", ".join([ convData(d, var_conv) for d in json ])
        sys.stdout.write(lst)
        sys.stdout.write("])")
    elif var_type == VT_ARRAY2D:
        sys.stdout.write("[|")
        rows = []
        for d in json:
            rows.append(", ".join([ convData(e, var_conv) for e in d ]))
        s = ", |".join(rows)
        sys.stdout.write(s)
        sys.stdout.write("|]")
    elif var_type == VT_SET:
        sys.stdout.write("{")
        lst = ", ".join([ convData(d, var_conv) for d in json ])
        sys.stdout.write(lst)
        sys.stdout.write("}")
    else:
        error("unknown variable type")
    sys.stdout.write(";\n\n")

def convData(d, var_conv):
    if var_conv == VC_SET:
        if hasattr(d, "__iter__"):
            return "{" + ", ".join([ str(e) for e in d ]) + "}"
        else:
            return "{" + str(d) + "}"
    elif var_conv == VC_SINGLETON:
        if d is None:
            return "{}"
        else:
            return "{" + str(d) + "}"
    else:
        return str(d)

def fixLocationValues(lst):
    new_lst = []
    for l in lst:
        new_l = []
        for v in l:
            if v is None:
                new_l.append("locValueForNull")
            else:
                new_l.append(v)
        new_lst.append(new_l)
    return new_lst

def convert2Bool(lst):
    new_lst = []
    for l in lst:
        if l == True:
            new_lst.append("true")
        else:
            new_lst.append("false")
    return new_lst

def parseSexpr(s):
    return sexparser.parse(s)

def convertConstraint(l):
    def fromConstraint(l):
        return fromBoolExpr(l)

    def fromBoolExpr(l):
        op = l[0]
        bin_num_maps = [ ("==", " == ")
                       , ("!=", " != ")
                       , (">" , " > ")
                       , (">=", " >= ")
                       , ("<" , " < ")
                       , ("<=", " <= ")
                       ]
        bin_bool_maps = [ ("<->", " <-> ")
                        , ("->", " -> ")
                        , ("&&" , " /\\ ")
                        , ("||", " \\/ ")
                        ]
        if op in [ x[0] for x in bin_num_maps ]:
            i = [ x[0] for x in bin_num_maps ].index(op)
            return ( "("
                   + fromNumExpr(l[1]) + bin_num_maps[i][1] + fromNumExpr(l[2])
                   + ")"
                   )
        elif op == "!":
            return "not " + fromBoolExpr(l[1])
        elif op in [ x[0] for x in bin_bool_maps ]:
            i = [ x[0] for x in bool_num_maps ].index(op)
            return ( "("
                   + fromBoolExpr(l[1]) + bin_num_maps[i][1]
                   + fromBoolExpr(l[2])
                   + ")"
                   )
        elif op == "in-set":
            return fromSetElemExpr(l[1]) + " in " + fromSetExpr(l[2])
        elif op == "fall-through":
            return ("fall_through(" + fromMatchExpr(l[1]) + ", "
                   + fromBlockExpr(l[2]) + ")"
                   )
        else:
            error("unknown bool expression: " + str(l))

    def fromNumExpr(l):
        op = l[0]
        bin_arith_maps = [ ("+", " + ")
                         , ("-", " - ")
                         ]
        if op in [ x[0] for x in bin_arith_maps ]:
            i = [ x[0] for x in bin_arith_maps ].index(op)
            return ( "("
                   + fromNumExpr(l[1]) + bin_arith_maps[i][1]
                   + fromNumExpr(l[2])
                   + ")"
                   )
        elif op == "int-to-num":
            return fromIntExpr(l[1])
        elif op == "bool-to-num":
            return "bool2int(" + fromBoolExpr(l[1]) + ")"
        elif op == "node-to-num":
            return fromNodeExpr(l[1])
        elif op == "match-to-num":
            return fromMatchExpr(l[1])
        elif op == "instr-to-num":
            return fromInstrExpr(l[1])
        elif op == "block-to-num":
            return fromBlockExpr(l[1])
        elif op == "loc-to-num":
            return fromLocExpr(l[1])
        else:
            error("unknown num expression: " + str(l))

    def fromSetElemExpr(l):
        op = l[0]
        if op == "block-to-set-elem":
            return fromBlockExpr(l[1])
        elif op == "loc-to-set-elem":
            return fromLocExpr(l[1])
        else:
            error("unknown set-elem expression: " + str(l))

    def fromSetExpr(l):
        op = l[0]
        bin_set_maps = [ ("union"    , " union ")
                       , ("intersect", " intersect ")
                       , ("diff"     , " diff ")
                       ]
        if op in [ x[0] for x in bin_set_maps ]:
            i = [ x[0] for x in bin_set_maps ].index(op)
            return ( "("
                   + fromSetExpr(l[1]) + bin_set_maps[i][1]
                   + fromSetExpr(l[2])
                   + ")"
                   )
        elif op == "loc-class":
            return ( "{"
                   + ", ".join([ fromLocExpr(e) for e in l[1] ])
                   + "}"
                   )
        else:
            error("unknown set expression: " + str(l))
        s = s + ")"
        return s

    def fromMatchExpr(l):
        op = l[0]
        if op == "ai":
            return str(l[1])
        elif l == "this":
            error("'this' match expressions not allowed")
        else:
            error("unknown match expression: " + str(l))

    def fromBlockExpr(l):
        op = l[0]
        if op == "block-wherein-match-is-placed":
            return "place[" + fromMatchExpr(l[1]) + "]"
        elif op == "block-wherein-data-is-defined":
            return "def[" + fromNodeExpr(l[1]) + "]"
        elif op == "block-of-bnode":
            return fromNodeExpr(l[1])
        else:
            error("unknown block expression: " + str(l))

    def fromIntExpr(l):
        op = l[0]
        if op == "int":
            return str(l[1])
        else:
            error("unknown int expression: " + str(l))

    def fromNodeExpr(l):
        op = l[0]
        if op == "ai":
            return str(l[1])
        elif op == "id":
            error("'id' node expressions not allowed")
        elif op == "node-selected-for-op":
            # [MC] Alt() for solver constant folding
            return "Alt(" + fromOperandExpr(l[1]) + ")"
        else:
            error("unknown node expression: " + str(l))

    def fromOperandExpr(l):
        op = l[0]
        if op == "ai":
            # [MC] +1 for 1-based solver
            return str(l[1]+1)
        elif op == "id":
            error("'id' operand expressions not allowed")
        else:
            error("unknown operand expression: " + str(l))

    def fromLocExpr(l):
        op = l[0]
        if op == "ai":
            return str(l[1])
        elif l == "id":
            error("'id' loc expressions not allowed")
        elif op == "loc-of-dnode":
            return "loc[" + fromNodeExpr(l[1]) + "]"
        elif l == "null":
            return "locValueForNull"
        else:
            error("unknown loc expression: " + str(l))

    return fromConstraint(l)



#=============
# MAIN SCRIPT
#=============

# Check arguments
if len(sys.argv) < 2:
    sys.stderr.write("No JSON file provided\n")
    sys.exit(1)
if len(sys.argv) > 2:
    error("Too many arguments\n")
json_file = sys.argv[1]
if not os.path.isfile(json_file):
    error("JSON file '" + json_file +"' not found")

# Read JSON file
json_data = []
with open(json_file, 'r') as file:
    json_data = json.load(file)

# [MC] Compute "canonicalDataLocs"
canonical = [0]
canonical.append(json_data["num-locations"])
for row in json_data["fun-valid-value-locs"]:
    canonical.append(row[1])
    canonical.append(row[1]+1)
for row in json_data["fun-valid-value-loc-ranges"]:
    canonical.append(row[2])
    canonical.append(row[3]+1)
for row in json_data["match-valid-value-locs"]:
    canonical.append(row[1])
    canonical.append(row[1]+1)
for row in json_data["match-valid-value-loc-ranges"]:
    canonical.append(row[2])
    canonical.append(row[3]+1)
canonical.sort()
canonical_set = set(canonical)

# [MC] Compute GCD of frequencies
fqs = json_data["fun-block-exec-freqs"]
scaled = []
g = fqs[0]
for x in fqs:
    g = fractions.gcd(g,x)
for x in fqs:
    scaled.append(x/g)

# Dump parameters [MC] for 1-based solver
dumpParams( bumpArrOfArr(json_data["fun-block-dom-sets"])
          , "domSetOfBlockInFunction"
          , VT_ARRAY1D
          , "allBlocksInFunction"
          , VC_SET
          )
dumpParams( g
          , "execFrequencyGCD"
          )
dumpParams( scaled
          , "execFrequencyOfBlockInFunction"
          , VT_ARRAY1D
          , "allBlocksInFunction"
          )
dumpParams( json_data["fun-entry-block"]+1
          , "entryBlockOfFunction"
          )
dumpParams( json_data["fun-valid-value-locs"]
          , "funValidDataLocs"
          , VT_ARRAY2D
          )
dumpParams( json_data["fun-valid-value-loc-ranges"]
          , "funValidDataLocRanges"
          , VT_ARRAY2D
          )
dumpParams( json_data["fun-num-blocks"]
          , "numBlocksInFunction"
          )
dumpParams( json_data["fun-num-data"]
          , "numDataInFunction"
          )
dumpParams( json_data["fun-num-operations"]
          , "numOperationsInFunction"
          )
dumpParams( bumpArr(json_data["fun-copies"])
          , "copiesInFunction"
          , VT_SET
          )
dumpParams( bumpArr(json_data["fun-states"])
          , "statesInFunction"
          , VT_SET
          )
dumpParams( bump2DArrYY(json_data["fun-state-def-edges"])
          , "stateDefEdgesForBlocksInFunction"
          , VT_ARRAY2D
          )
dumpParams( bump2DArrYY(json_data["in-block"])
          , "inBlock"
          , VT_ARRAY2D
          )
dumpParams( bump2DArrYYY(json_data["in-block-succ"])
          , "inBlockSucc"
          , VT_ARRAY2D
          )
dumpParams( bump2DArrYYN(json_data["match-valid-value-locs"])
          , "matchValidDataLocs"
          , VT_ARRAY2D
          )
dumpParams( bump2DArrYYNN(fixLocationValues(json_data["match-valid-value-loc-ranges"]))
          , "matchValidDataLocRanges"
          , VT_ARRAY2D
          )
dumpParams( json_data["match-code-sizes"]
          , "codeSizeOfMatch"
          , VT_ARRAY1D
          , "allMatches"
          )
dumpParams( bumpArrOfArr(json_data["match-consumed-blocks"])
          , "consumedBlocksInMatch"
          , VT_ARRAY1D
          , "allMatches"
          , VC_SET
          )
dumpParams( bumpArrOfArr(json_data["match-operands-defined"])
          , "operandsDefinedByMatch"
          , VT_ARRAY1D
          , "allMatches"
          , VC_SET
          )
dumpParams( bumpArrOfArr(json_data["match-operands-used"])
          , "operandsUsedByMatch"
          , VT_ARRAY1D
          , "allMatches"
          , VC_SET
          )
dumpParams( bumpArrOfArr(json_data["match-external-operands"])
          , "operandsExternalToMatch"
          , VT_ARRAY1D
          , "allMatches"
          , VC_SET
          )
dumpParams( bumpArrOfArr(json_data["match-internal-operands"])
          , "operandsInternalToMatch"
          , VT_ARRAY1D
          , "allMatches"
          , VC_SET
          )
dumpParams( bumpArrOfSing(json_data["match-entry-blocks"])
          , "entryBlockOfMatch"
          , VT_ARRAY1D
          , "allMatches"
          , VC_SINGLETON
          )
dumpParams( json_data["match-latencies"]
          , "latencyOfMatch"
          , VT_ARRAY1D
          , "allMatches"
          )
dumpParams( bumpArr(json_data["match-copy-instrs"])
          , "copyInstrMatches"
          , VT_SET
          )
dumpParams( bumpArr(json_data["match-inactive-copy-instrs"])
          , "inactiveCopyInstrMatches"
          , VT_SET
          )
dumpParams( bumpArr(json_data["match-null-instrs"])
          , "nullInstrMatches"
          , VT_SET
          )
dumpParams( bumpArr(json_data["match-phi-instrs"])
          , "phiInstrMatches"
          , VT_SET
          , "allMatches"
          )
dumpParams( bumpArrOfArr(json_data["match-operations-covered"])
          , "operationsCoveredByMatch"
          , VT_ARRAY1D
          , "allMatches"
          , VC_SET
          )
dumpParams( bumpArrOfArr(json_data["match-spanned-blocks"])
          , "spannedBlocksInMatch"
          , VT_ARRAY1D
          , "allMatches"
          , VC_SET
          )
dumpParams( bump2DArrYYY(json_data["match-input-def-edges"])
          , "inputDefEdgesInMatch"
          , VT_ARRAY2D
          )
dumpParams( bump2DArrYYY(json_data["match-output-def-edges"])
          , "outputDefEdgesInMatch"
          , VT_ARRAY2D
          )
dumpParams( json_data["num-locations"]
          , "numLocations"
          )
dumpParams( json_data["num-matches"]
          , "numMatches"
          )
dumpParams( json_data["num-operands"]
          , "numOperands"
          )
dumpParams( bumpArrOfArr(json_data["operand-alternatives"])
          , "operandAlternatives"
          , VT_ARRAY1D
          , "allOperands"
          , VC_SET
          )
dumpParams( bump2DArrYYY(json_data["same-loc"])
          , "sameLoc"
          , VT_ARRAY2D
          )
dumpParams( bumpArr(json_data["matches-by-size"])
          , "allMatchesBySize"
          , VT_ARRAY1D
          , "allMatches"
          )
dumpParams( bumpArr(json_data["dominated-matches"])
          , "dominatedMatches"
          , VT_SET
          )
dumpParams( canonical_set
          , "canonicalDataLocs"
          , VT_SET
          )

# Dump constraints
for c in json_data["fun-constraints"]:
    sys.stdout.write("constraint\n")
    sys.stdout.write(convertConstraint(parseSexpr(c)))
    sys.stdout.write(";\n")
sys.stdout.write("\n")
for m in range(len(json_data["match-constraints"])):
    cs = json_data["match-constraints"][m]
    if len(cs) == 0:
        continue
    for c in cs:
        sys.stdout.write("constraint\n")
        # [MC] +1 for 1-based solver
        sys.stdout.write("sel[" + str(m+1) + "] -> ")
        sys.stdout.write(convertConstraint(parseSexpr(c)))
        sys.stdout.write(";\n")
    sys.stdout.write("\n")
