#!/usr/bin/python

#  Main authors:
#    Gabriel Hjort Blindell <ghb@kth.se>
#
#  Copyright (c) 2012-2017, Gabriel Hjort Blindell <ghb@kth.se>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



#=========
# IMPORTS
#=========

import json
import os.path
import sys



#================
# HELP FUNCTIONS
#================

def error(msg):
    sys.stderr.write("ERROR: " + msg + "\n")
    sys.exit(1)

def extractData(line):
    pos = line.find("=")
    if pos < 0:
        raise SyntaxError("Expected '=' not found")
    name = line[:pos].strip()
    data = toValue(line[pos + 1:].strip())
    return name, data

def toValue(s):
    s = s.strip()
    if len(s) == 0:
        raise SyntaxError("No data")
    if s[0] == '[':
        if not s[-1] == ']':
            raise SyntaxError("Expected ']' not found")
        values = []
        for t in s[1:-1].split(','):
            if len(t) == 0:
                continue
            values.append(toValue(t))
        return values
    else:
        if s == "true":
            return True
        elif s == "false":
            return False
        elif s.isdigit() or (s.startswith("-") and s[1:].isdigit()):
            return int(s)
        else:
            return s

def consistsOnlyOf(s, ch):
    if len(s) == 0:
        return False
    for c in s:
        if c != ch:
            return False
    return True

def getDataByName(data, name):
    for d in data:
        if d[0] == name:
            return d[1]

def getRequiredDataByName(data, name):
    d = getDataByName(data, name)
    if d == None:
        error("Required data '" + name + "' not found")
    return d



#=============
# MAIN SCRIPT
#=============

# Parse command-line arguments
solution_file = ""
do_fall_back = False
sys_argv = sys.argv[:]
for arg in sys.argv:
    if arg == "-fb":
        do_fall_back = True
        sys_argv.remove(arg)
sys.argv = sys_argv
if len(sys.argv) < 2:
    sys.stderr.write("No Minizinc solution file provided\n")
    sys.exit(1)
if len(sys.argv) > 2:
    error("Too many arguments\n")
solution_file = sys.argv[1]
if not os.path.isfile(solution_file):
    error("Minizinc solution file '" + solution_file +"' not found")

# Read solution file
content = []
with open(solution_file, 'r') as file:
    content = file.readlines()

# Clean up solution data
orig_content = content
content = []
for l in orig_content:
    line = l.strip()
    if len(line) > 0 and line[0] != '%':
        content.append(line)

# Check if no solution was found
has_sol = True
unsat = False
sol_error = ""
if ( len(content) == 0
     or content[0].strip() == "=====UNBOUNDED====="
     or content[0].strip() == "=====UNKNOWN====="
   ):
    has_sol = False
    sol_error = "No solution found (reason unknown)"
elif content[0].strip() == "=====UNSATISFIABLE=====":
    has_sol = False
    unsat = True
    sol_error = "No solution found because model was reported as unsatisfiable"
if not has_sol:
    if not do_fall_back:
        error(sol_error)

# Extract data
all_data = []
found_optimal = False
for line in content:
    if len(line) == 0 or line[0] == '%' or consistsOnlyOf(line, '-'):
        continue
    if consistsOnlyOf(line, '='):
        found_optimal=True
        continue
    try:
        name, data = extractData(line)
    except SyntaxError as e:
        error(str(e))
    if getDataByName(all_data, name) != None:
        error("Duplicate entries with name '" + name + "'")
    all_data.append([name, data])
all_data.append(["optimal", found_optimal])

# Abort if no solution found
if not has_sol:
    json_data = {}
    json_data["has-solution"] = False
    json_data["unsatisfiable"] = unsat
    print json.dumps(json_data)
    sys.exit(0)

# [MC] Convert data to 0-based indexing
for d in all_data:
    name = d[0]
    if ( name == "alt" or
         name == "dplace" or
         name == "loc" or
         name == "place" or
         name == "succ"
       ):
        d[1] = [x-1 for x in d[1]]
    elif name == "block_value_for_null" or name == "alt_value_for_null":
        d[1] = d[1] - 1

# Construct block order data from block successor data
succ_data = getRequiredDataByName(all_data, "succ")
null_block = getRequiredDataByName(all_data, "block_value_for_null")
try:
    null_block = int(null_block)
except ValueError:
    error("Value of 'block_value_for_null' is not an int")
if null_block < 0 or null_block > len(succ_data):
    error("Value of 'block_value_for_null' is out of bounds")
entry_block = getRequiredDataByName(all_data, "entry")
try:
    entry_block = int(entry_block) - 1 # Convert to 0-based indexing
except ValueError:
    error("Value of 'entry' is not an int")
ord_data = [entry_block]
while succ_data[ord_data[-1]] != entry_block:
    ord_data.append(succ_data[ord_data[-1]])
all_data.append(["ord", ord_data])

# Add 'has_d_loc' array to data
loc_data = getRequiredDataByName(all_data, "loc")
loc_value_for_null = \
  getRequiredDataByName(all_data, "loc_value_for_null")
has_d_loc_data = []
for loc in loc_data:
    has_d_loc_data.append(loc != loc_value_for_null)
all_data.append(["has_d_loc", has_d_loc_data])

# Add 'has_o_alt' array to data
alt_data = getRequiredDataByName(all_data, "alt")
alt_value_for_null = \
  getRequiredDataByName(all_data, "alt_value_for_null")
has_o_alt_data = []
for alt in alt_data:
    has_o_alt_data.append(alt != alt_value_for_null)
all_data.append(["has_o_alt", has_o_alt_data])

# Turn desirable data into JSON
data_table = [ ["loc",        "loc-of-datum"]
             , ["has_d_loc",  "has-datum-loc"]
             , ["sel",        "is-match-selected"]
             , ["has_o_alt",  "has-operand-alt"]
             , ["alt",        "alt-of-operand"]
             , ["place",      "block-of-match"]
             , ["ord",        "order-of-blocks"]
             , ["cost",       "cost"]
             , ["optimal",    "is-solution-optimal"]
             ]
keep_table = [ d[0] for d in data_table ]
replace_table = [ d[1] for d in data_table ]
json_data = {}
for d in all_data:
    name = d[0]
    for i in range(len(keep_table)):
        if name == keep_table[i]:
            json_data[replace_table[i]] = d[1]
            del keep_table[i]
            del replace_table[i]
            break

# Add additional field indicating that this is a solution
json_data["has-solution"] = True

# Check if any required data is missing
if len(keep_table) > 0:
    error("Required data '" + keep_table[0] + "' not found")

# Print JSON
print json.dumps(json_data)
