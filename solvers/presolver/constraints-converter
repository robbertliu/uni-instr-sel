#!/usr/bin/python

#  Main authors:
#    Gabriel Hjort Blindell <ghb@kth.se>
#
#  Copyright (c) 2012-2016, Gabriel Hjort Blindell <ghb@kth.se>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



#=========
# IMPORTS
#=========

import json
import sexparser
import os.path
import sys
from itertools import groupby
from operator import itemgetter



#================
# HELP FUNCTIONS
#================

def error(msg):
    sys.stderr.write("ERROR: " + msg + "\n")
    sys.exit(1)

def parseSExpr(s):
    return sexparser.parse(s)

# Takes a 2D array of values and locations, and combines locations that is
# continuous for a given value into a range. The function returns these ranges
# along with the input data but where such locations have been removed.
def extractValueRanges(loc_data):
    ranges = []
    new_data = []

    loc_data.sort(key = itemgetter(0))
    for v, ld in groupby(loc_data, itemgetter(0)):
        # Extract locations, remove possible duplicates and then sort the list
        locs = [i[1] for i in ld]
        locs = sorted(list(set(locs)))

        # Check if the list is a contiguous range
        loc_min = locs[0]
        loc_max = locs[-1]
        if len(locs) > 1 and len(locs) - 1 == loc_max - loc_min:
            ranges.append([v, loc_min, loc_max])
        else:
            for l in locs:
                new_data.append([v, l])

    return ranges, new_data



#=============
# MAIN SCRIPT
#=============

# Check files
if len(sys.argv) < 2:
    sys.stderr.write("No JSON file given\n")
    sys.exit(1)
if len(sys.argv) > 2:
    sys.stderr.write("Too many arguments\n")
    sys.exit(1)
json_file = sys.argv[1]
if not os.path.isfile(json_file):
    error("JSON file '" + json_file + "' not found")

# Read JSON file
json_data = []
with open(json_file, 'r') as file:
    json_data = json.load(file)

json_m_cons = json_data["match-constraints"]

# Produce 'match-fall-through-block' parameters
params = []
for m in range(len(json_m_cons)):
    new_constraints = []
    for c in json_m_cons[m]:
        l = parseSExpr(c)
        if ( len(l) == 2 and l[0] == "fall-through"
             and len(l[1]) == 2 and l[1][0] == "block-of-bnode"
             and len(l[1][1]) == 2 and l[1][1][0] == "ai"
           ):
            fall_b = int(l[1][1][1])
            params.append([m, fall_b])
        else:
            new_constraints.append(c)
    json_m_cons[m] = new_constraints
json_data["match-fall-through-block"] = params

# Produce 'match-valid-value-loc-ranges' parameters
range_data = []
new_match_locs = []
match_locs = json_data["match-valid-value-locs"]
match_locs.sort(key = itemgetter(0))
for m, md in groupby(match_locs, itemgetter(0)):
    loc_data = [[r[1], r[2]] for r in md]
    ranges, new_locs = extractValueRanges(loc_data)
    for r in ranges:
        range_data.append([m, r[0], r[1], r[2]])
    for r in new_locs:
        new_match_locs.append([m, r[0], r[1]])
json_data["match-valid-value-locs"] = new_match_locs
json_data["match-valid-value-loc-ranges"] = range_data

# Produce 'fun-valid-value-loc-ranges' parameters
ranges, new_locs = extractValueRanges(json_data["fun-valid-value-locs"])
json_data["fun-valid-value-locs"] = new_locs
json_data["fun-valid-value-loc-ranges"] = ranges

# Print JSON
print json.dumps(json_data)
