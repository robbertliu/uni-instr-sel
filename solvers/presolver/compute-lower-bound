#!/usr/bin/python

#  Main authors:
#    Gabriel Hjort Blindell <ghb@kth.se>
#
#  Copyright (c) 2012-2017, Gabriel Hjort Blindell <ghb@kth.se>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



#=========
# IMPORTS
#=========

import json
import os.path
import sys



#================
# HELP FUNCTIONS
#================

def error(msg):
    sys.stderr.write("ERROR: " + msg + "\n")
    sys.exit(1)



#=============
# MAIN SCRIPT
#=============

# Check arguments
if len(sys.argv) < 2:
    sys.stderr.write("No JSON file given\n")
    sys.exit(1)
if len(sys.argv) > 2:
    sys.stderr.write("Too many arguments\n")
    sys.exit(1)
json_file = sys.argv[1]
if not os.path.isfile(json_file):
    error("JSON file '" + json_file +"' not found")

# Read JSON file
json_data = {}
with open(json_file, 'r') as file:
    json_data = json.load(file)

# For each operation, select the cheapest match to cover it (allowing overlaps)
# and place it in the block with lowest frequency
min_cost = 0
op_queue = range(json_data["fun-num-operations"])
while len(op_queue) > 0:
    o = op_queue[0]
    ms = [ m for m in range(json_data["num-matches"])
           if o in json_data["match-operations-covered"][m]
         ]

    # Select match with least latency
    selected_m = -1
    min_latency = sys.maxint
    for m in ms:
        m_latency = json_data["match-latencies"][m]
        if m_latency < min_latency:
            min_latency = m_latency
            selected_m = m

    # Compute cost
    bs = json_data["fun-op-placements"][o]
    min_freq = sys.maxint
    for b in bs:
        min_freq = min(min_freq, json_data["fun-block-exec-freqs"][b])
    min_cost = min_cost + min_latency * min_freq

    # Remove covered operations from queue
    for o in json_data["match-operations-covered"][selected_m]:
        if o in op_queue:
            op_queue.remove(o)

lb_json_data = {}
lb_json_data["lower-bound"] = min_cost

# Print JSON
print json.dumps(lb_json_data)
