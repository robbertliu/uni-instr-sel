#!/usr/bin/python

#  Main authors:
#    Gabriel Hjort Blindell <ghb@kth.se>
#
#  Copyright (c) 2012-2017, Gabriel Hjort Blindell <ghb@kth.se>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



#=========
# IMPORTS
#=========

import json
import os.path
import sys



#================
# HELP FUNCTIONS
#================

def error(msg):
    sys.stderr.write("ERROR: " + msg + "\n")
    sys.exit(1)



#=============
# MAIN SCRIPT
#=============

# Check arguments
if len(sys.argv) < 2:
    sys.stderr.write("No JSON file given\n")
    sys.exit(1)
if len(sys.argv) > 2:
    sys.stderr.write("Too many arguments\n")
    sys.exit(1)
json_file = sys.argv[1]
if not os.path.isfile(json_file):
    error("JSON file '" + json_file +"' not found")

# Read JSON file
json_data = {}
with open(json_file, 'r') as file:
    json_data = json.load(file)

# Setup convenience variables
num_locations = json_data["num-locations"]
num_matches = json_data["num-matches"]
num_data = json_data["fun-num-data"]
num_operands = json_data["num-operands"]

# Convert lists of operand alternatives into sets
operand_alt_sets = [[]] * num_operands
for o in range(num_operands):
    operand_alt_sets[o] = set(json_data["operand-alternatives"][o])

# Compute set of data defined and set of data used per match
match_data_defined = [[]] * num_matches
match_data_used = [[]] * num_matches
for m in range(num_matches):
    match_data_defined[m] = [ d for d in range(num_data)
                                for o in json_data["match-operands-defined"][m]
                                    if {d} == operand_alt_sets[o]
                            ]
    match_data_used[m] = [ d for d in range(num_data)
                             for o in json_data["match-operands-used"][m]
                                 if {d} == operand_alt_sets[o]
                         ]

# Compute set of matches that cover a particular operation
num_operands = json_data["fun-num-operations"]
o_matches = [[]] * num_operands
for o in range(num_operands):
    o_matches[o] = { m for m in range(num_matches)
                           if o in json_data["match-operations-covered"][m]
                   }

# Compute set of matches that define a particular datum
d_matches = [[]] * num_data
for d in range(num_data):
    d_matches[d] = { m for m in range(num_matches)
                           if d in match_data_defined[m]
                   }

illegal_matches = set()

# Forbid matches that, if selected, would leave some operations uncoverable.
# Empty matchsets (due to lack of patterns) are ignored as those would otherwise
# cause everything to become an illegal match
for i in range(num_operands):
    for j in range(num_operands):
        if i == j: continue
        if len(o_matches[i]) > 0 and o_matches[i] <= o_matches[j]:
            illegal_matches |= o_matches[j] - o_matches[i]

# Forbid matches that, if selected, would leave some data undefinable.
# Empty matchsets (due to lack of patterns) are ignored as those would otherwise
# cause everything to become an illegal match
for i in range(num_data):
    for j in range(num_data):
        if i == j: continue
        if len(d_matches[i]) > 0 and d_matches[i] <= d_matches[j]:
            illegal_matches |= d_matches[j] - d_matches[i]

# If all matches in domain[i] use some datum d, then all kill instructions that
# define d are not selectable
domain = o_matches + d_matches
for i in range(len(domain)):
    M = domain[i]
    for d in range(num_data):
        all_matches_use_d = True
        for m in M:
            if not d in match_data_used[m]:
                all_matches_use_d = False
                break
        if all_matches_use_d:
            illegal_matches |= { m for m in json_data["match-kill-instrs"]
                                       if d in match_data_defined[m]
                               }

all_matches = set(range(num_matches))
kill_matches = set(json_data["match-kill-instrs"])
null_matches = set(json_data["match-null-instrs"])
phi_matches = set(json_data["match-phi-instrs"])

# If a match m (excluding null and phi matches) defines some datum d in a set of
# locations that is not accessible by any of the matches (excluding null and phi
# matches) using d, then m is not selectable
for m1 in (all_matches - null_matches - phi_matches):
    for p1 in ( set(json_data["match-operands-defined"][m1]) &
                set(json_data["match-exterior-operands"][m1])
             ):
        locs = json_data["match-valid-value-locs"]

        # Accumulate set of locations wherein m defines the datum of p
        m_p_locs = set()
        for t in locs:
            if t[1] == p1:
                m_p_locs |= {t[2]}
        if len(m_p_locs) == 0:
            continue

        no_overlap_for_any_d = True
        for d in operand_alt_sets[p1]:
            # Accumulate the set of use operands that can be connected to d
            ops_using_d = set()
            for m2 in all_matches - kill_matches:
                m2_def_ops = set(json_data["match-operands-defined"][m2])
                m2_use_ops = set(json_data["match-operands-used"][m2])
                for p2 in m2_use_ops - m2_def_ops:
                    if d in operand_alt_sets[p2]:
                        ops_using_d |= {p2}

            # Accumulate the set of locations from which d can be used
            use_locs_of_d = set()
            for p2 in ops_using_d:
                found_loc = False
                for t in locs:
                    if t[1] == p2:
                        use_locs_of_d |= {t[2]}
                        found_loc = True
                if not found_loc:
                    use_locs_of_d |= set(range(num_locations))
                    break

            if len(m_p_locs & use_locs_of_d) > 0:
                no_overlap_for_any_d = False
                break

        if no_overlap_for_any_d:
            illegal_matches |= {m1}
            break

# If a match m (excluding null and phi matches) uses some datum d and requires
# that is in a location that is not writable by any of the matches (excluding
# kill matches) defining d, then m is not selectable
for m1 in (all_matches - null_matches - phi_matches):
    for p1 in ( set(json_data["match-operands-used"][m1]) -
                set(json_data["match-operands-defined"][m1])
             ):
        locs = json_data["match-valid-value-locs"]

        # Accumulate set of locations wherein m uses the datum of p
        m_p_locs = set()
        for t in locs:
            if t[1] == p1:
                m_p_locs |= {t[2]}
        if len(m_p_locs) == 0:
            continue

        no_overlap_for_any_d = True
        for d in operand_alt_sets[p1]:
            # Accumulate the set of def operands that can be connected to d
            ops_defining_d = set()
            for m2 in all_matches - kill_matches:
                for p2 in json_data["match-operands-defined"][m2]:
                    if d in operand_alt_sets[p2]:
                        ops_defining_d |= {p2}

            # Accumulate the set of locations in which d can be defined
            def_locs_of_d = set()
            for p2 in ops_defining_d:
                found_loc = False
                for t in locs:
                    if t[1] == p2:
                        def_locs_of_d |= {t[2]}
                        found_loc = True
                if not found_loc:
                    def_locs_of_d |= set(range(num_locations))
                    break

            if len(m_p_locs & def_locs_of_d) > 0:
                no_overlap_for_any_d = False
                break

        if no_overlap_for_any_d:
            illegal_matches |= {m1}
            break

# Print JSON
i_json_data = {}
i_json_data["illegal-matches-ai"] = list(illegal_matches)
print json.dumps(i_json_data)
