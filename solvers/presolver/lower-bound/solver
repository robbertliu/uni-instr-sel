#!/bin/bash

#  Main authors:
#    Gabriel Hjort Blindell <ghb@kth.se>
#
#  Copyright (c) 2012-2017, Gabriel Hjort Blindell <ghb@kth.se>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



#==========
# SETTINGS
#==========

# Find the path to this directory (even through symbolic links)
# (from http://stackoverflow.com/a/246128/426092)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # Resolve $SOURCE until the file is no longer a
                           # symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative
                                               # symlink, we need to resolve it
                                               # relative to the path where the
                                               # symlink file was located
done
THIS_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

JSON_SOLUTION_FILENAME="solution.json"
JSON_STATS_FILENAME="stats.json"
MINIZINC_PARAMS_FILENAME="params.mzn"
MINIZINC_FULL_MODEL_FILENAME="full-model.mzn"
MINIZINC_SOLUTION_FILENAME="full-model.szn"
MINIZINC_STATS_FILENAME="full-model.stats"
MINIZINC_ERROR_FILENAME="error.log"
MINIZINC_BASE_MODEL_FILEPATH="$THIS_DIR/base-model.mzn"

# These will be set after parsing command-line arguments
JSON_INPUT_FILEPATH=""
JSON_INPUT_FILENAME=""
JSON_SOLUTION_FILEPATH=""
JSON_STATS_FILEPATH=""
JSON_OUTPUT_FILEPATH=""
JSON_OUTPUT_DIR=""
TMP_DIR=""
MINIZINC_PARAMS_FILEPATH=""
MINIZINC_FULL_MODEL_FILEPATH=""
MINIZINC_SOLUTION_FILEPATH=""
MINIZINC_STATS_FILEPATH=""
MINIZINC_ERROR_FILEPATH=""
MINIZINC_SOLVER_BIN=""
MINIZINC_GLOBALS_DIR=""
MINIZINC_TIME_LIMIT=""



#================
# HELP FUNCTIONS
#================

# Bold green
C_OK="\033[1;32m"
# Bold red
C_ERROR="\033[1;31m"
# Normal red
C_WARNING="\033[0;31m"
# Bold yellow
C_IGNORED="\033[1;33m"
# Bold blue
C_INFO="\033[1;34m"
# No color
C_NONE="\033[0m"

function echoerr {
    echo -e "$@" 1>&2
}

function echowarn {
    echoerr "$@"
}

# Executes a bash command.
#
# $1: Command string.
# $2: Boolean flag (values 0 and 1) whether to terminate if the command exits
#     with any status code other than 0. Default value is 1.
# $3: File to pipe STDERR. If no file is given, whatever is written to STDERR
#     will be redirected to STDOUT and labeled appropriately depending on the
#     exit code (0 means warning, anything else means errors).
function exe {
    if [ -z "$2" ] || [ $2 -ne 0 ]; then
        term_on_error=1
    else
        term_on_error=0
    fi
    if [ -z "$3" ]; then
        error_log=`mktemp`
        del_error_log=1
    else
        error_log="$3"
        del_error_log=0
    fi

    cmd="$1 2> $error_log"
    echo -e "  [${C_INFO}EXECUTING${C_NONE}] $cmd"
    eval "$cmd"
    status=$?
    if [ -f "$error_log" ]; then
        errors=`cat $error_log`
    else
        errors=""
    fi
    if [ -n "$errors" ] && [ $del_error_log -eq 1 ]; then
        if [ $status -eq 0 ]; then
            reportWarning "$errors"
        else
            reportError "$errors"
        fi
    fi
    if [ $del_error_log -ne 0 ]; then
        rm -f "$error_log"
    fi
    if [ $status -ne 0 ] && [ $term_on_error -eq 1 ]; then
        exit 1
    fi
    $( exit $status ) # Restore $? to exit status of the exe command
}

function ensureFileExists {
    if [ ! -f "$@" ]; then
        reportError "Required file \"$@\" does not exist"
        exit 1
    fi
}

function reportError {
    echoerr "  [${C_ERROR}ERROR${C_NONE}] $@"
}

function reportWarning {
    echowarn "  [${C_WARNING}WARNING${C_NONE}] $@"
}

function reportTask {
    msg=`echo "$@" | tr [a-z] [A-Z]`
    echo
    echo -e "${C_INFO}* $msg...${C_NONE}"
}

function reportNewEntity {
    echo -e "  [${C_OK}CREATED${C_NONE}] $@"
}

function reportUpdatedEntity {
    echo -e "  [${C_OK}UPDATED${C_NONE}] $@"
}

function reportLatestTimeFromStats {
    stats_filepath="$MINIZINC_STATS_FILEPATH"
    time=`tail -n 1 $stats_filepath | sed -n 's/^[^:]*: //p'`
    echo -e "  [${C_INFO}TOOK${C_NONE}] $time"
}

function flattenModelFile {
    # It is assumed that the working directory is where the MZN file is
    fzn_filepath="${MINIZINC_FULL_MODEL_FILEPATH%.*}.fzn"
    reportTask "Flattening MiniZinc model file"
    stats_filepath="$MINIZINC_STATS_FILEPATH"
    echo -n "FLATTENING TIME: " >> $stats_filepath
    command="`which time` -pqao $stats_filepath --format %es"
    command="$command \
             mzn2fzn -G $MINIZINC_GLOBALS_DIR"
    command="$command \
             ${MINIZINC_FULL_MODEL_FILEPATH##*/}"
    exe "$command"
    reportLatestTimeFromStats
    reportNewEntity "$fzn_filepath"
    reportNewEntity "${MINIZINC_FULL_MODEL_FILEPATH%.*}.ozn"
    reportUpdatedEntity "$stats_filepath"
}

function inflateSolutionFile {
    # It is assumed that the working directory is where the FZN and OZN files
    # are
    szn_filepath="${MINIZINC_FULL_MODEL_FILEPATH%.*}.szn"
    ozn_filepath="${MINIZINC_FULL_MODEL_FILEPATH%.*}.ozn"
    tmp_file="$MINIZINC_SOLUTION_FILEPATH.tmp"
    reportTask "Inflating MiniZinc solution file"
    exe "solns2out ${ozn_filepath##*/} < ${szn_filepath##*/} > $tmp_file"
    exe "mv $tmp_file $MINIZINC_SOLUTION_FILEPATH"
    reportUpdatedEntity "$MINIZINC_SOLUTION_FILEPATH"
}

function cleanupErrorFile {
    touch "$MINIZINC_ERROR_FILEPATH"
    mv "$MINIZINC_ERROR_FILEPATH" "$MINIZINC_ERROR_FILEPATH.tmp"
    cat "$MINIZINC_ERROR_FILEPATH.tmp" \
      | grep -v "Opturion CPX(tm)" \
      | grep -v "Academic license" \
      > "$MINIZINC_ERROR_FILEPATH"
}

function warnAboutPotentialErrors {
    error_word_count=`wc -w < $MINIZINC_ERROR_FILEPATH`
    if [[ $error_word_count > 0 ]]; then
        msg=`cat $MINIZINC_ERROR_FILEPATH`
        echowarn
        reportWarning "Potential problems were reported during solving:"
        echowarn "$msg"
        echowarn
    fi
}

function executeSolver {
    # It is assumed that the working directory is where the FZN and OZN files
    # are
    reportTask "Running solver"
    stats_filepath="$MINIZINC_STATS_FILEPATH"
    echo -n "SOLVING TIME: " >> $stats_filepath
    command="`which time` -pqao $stats_filepath --format %es"
    command="$command \
             $MINIZINC_SOLVER_BIN"
    if [[ $MINIZINC_TIME_LIMIT > 0 ]]; then
        command="$command \
                 --time-out ${MINIZINC_TIME_LIMIT}"
    fi
    command="$command \
             ${MINIZINC_FULL_MODEL_FILENAME%.*}.fzn"
    command="$command \
             > $MINIZINC_SOLUTION_FILEPATH"
    exe "$command" 0 "$MINIZINC_ERROR_FILEPATH"
    exit_status=$?
    reportLatestTimeFromStats
    if [[ $exit_status == 124 ]]; then
        # Solver timed out
        exit_status=0
    fi
    cleanupErrorFile
    error_msg=`cat $MINIZINC_ERROR_FILEPATH`
    $( exit $exit_status ) # Restore $? to exit status of the solver
    if [ $exit_status -ne 0 ]; then
        reportError "$error_msg"
        exit 1
    else
        warnAboutPotentialErrors
    fi
    reportNewEntity "$MINIZINC_SOLUTION_FILEPATH"
    reportUpdatedEntity "$stats_filepath"
}



#=============
# MAIN SCRIPT
#=============

# Parse arguments
while [[ $# > 1 ]]
do
    key="$1"

    case $key in
        -i|--input)
            JSON_INPUT_FILEPATH="$2"
            shift
        ;;
        -o|--output)
            JSON_OUTPUT_FILEPATH="$2"
            shift
        ;;
        -s|--solver)
            MINIZINC_SOLVER_BIN="$2"
            shift
        ;;
        -g|--globals)
            MINIZINC_GLOBALS_DIR="$2"
            shift
        ;;
        -t|--timelimit)
            MINIZINC_TIME_LIMIT="$2"
            shift
        ;;
        *)
            reportError "Unknown argument switch '$1'"
            exit 1
        ;;
    esac
    shift
done
if [[ $# > 1 ]]; then
    reportError "Unknown trailing argument '$1'"
    exit 1
fi

# Check arguments
if [ -z "$JSON_INPUT_FILEPATH" ]; then
    reportError "No JSON input file provided (use -i or --input switch)"
    exit 1
else
    ensureFileExists "$JSON_INPUT_FILEPATH"
fi
if [ -z "$JSON_OUTPUT_FILEPATH" ]; then
    reportError "No JSON output file provided (use -o or --output switch)"
    exit 1
fi
if [ -z "$MINIZINC_SOLVER_BIN" ]; then
    reportError "No solver specified (use -s or --solver switch)"
    exit 1
else
    if [[ "$MINIZINC_SOLVER_BIN" != fzn* ]]; then
        reportError "Only FZN solvers supported (name of executable must" \
                    "start with \"fzn\")"
        exit 1
    fi
fi
if [ -z "$MINIZINC_GLOBALS_DIR" ]; then
    reportError "No globals directory specified (use -g or --globals switch)"
    exit 1
fi

reportTask "Creating temporary directory"
TMP_DIR=`mktemp -d`
if [ ! -d "$TMP_DIR" ]; then
    reportError "Failed to create temporary directory"
fi
reportNewEntity "$TMP_DIR"

# Set filepath variables
JSON_INPUT_FILENAME="$(basename $JSON_INPUT_FILEPATH)"
JSON_INPUT_FILENAME="${JSON_INPUT_FILEPATH%.*}"
JSON_OUTPUT_DIR="$(dirname $JSON_OUTPUT_FILEPATH)"
JSON_SOLUTION_FILEPATH="$TMP_DIR/$JSON_SOLUTION_FILENAME"
JSON_STATS_FILEPATH="$TMP_DIR/$JSON_STATS_FILENAME"
MINIZINC_PARAMS_FILEPATH="$TMP_DIR/$MINIZINC_PARAMS_FILENAME"
MINIZINC_FULL_MODEL_FILEPATH="$TMP_DIR/$MINIZINC_FULL_MODEL_FILENAME"
MINIZINC_SOLUTION_FILEPATH="$TMP_DIR/$MINIZINC_SOLUTION_FILENAME"
MINIZINC_STATS_FILEPATH="$TMP_DIR/$MINIZINC_STATS_FILENAME"
MINIZINC_ERROR_FILEPATH="$TMP_DIR/$MINIZINC_ERROR_FILENAME"

reportTask "Generating MiniZinc parameter file"
stats_filepath="$MINIZINC_STATS_FILEPATH"
echo -n "PARAMS-GENERATION TIME: " >> $stats_filepath
command="`which time` -pqao $stats_filepath --format %es"
command="$command \
         $THIS_DIR/json2params $JSON_INPUT_FILEPATH > $MINIZINC_PARAMS_FILEPATH"
exe "$command"
reportLatestTimeFromStats
reportNewEntity $MINIZINC_PARAMS_FILEPATH

reportTask "Generating MiniZinc model file"
exe "cat $MINIZINC_BASE_MODEL_FILEPATH > $MINIZINC_FULL_MODEL_FILEPATH"
echo >> "$MINIZINC_FULL_MODEL_FILEPATH"
echo >> "$MINIZINC_FULL_MODEL_FILEPATH"
echo >> "$MINIZINC_FULL_MODEL_FILEPATH"
exe "cat $MINIZINC_PARAMS_FILEPATH >> $MINIZINC_FULL_MODEL_FILEPATH"
reportNewEntity "$MINIZINC_FULL_MODEL_FILEPATH"

MINIZINC_FULL_MODEL_SAVE_PATH="$JSON_OUTPUT_DIR/$JSON_INPUT_FILENAME.lb.mzn"
reportTask "Saving MiniZinc model for later evaluation"
exe "cp $MINIZINC_FULL_MODEL_FILEPATH $MINIZINC_FULL_MODEL_SAVE_PATH"
reportNewEntity "$MINIZINC_FULL_MODEL_SAVE_PATH"

prev_dir=`pwd`
cd "$TMP_DIR"

# The following functions assume that the working directory is $TMP_DIR
flattenModelFile
executeSolver
inflateSolutionFile

cd "$prev_dir"

reportTask "Converting MiniZinc solution to JSON format"
arg=`[[ "$MINIZINC_FALL_BACK_TO_LLVM" -eq "1" ]] && echo "-fb" || echo ""`
cmd="$THIS_DIR/solution2json $arg $MINIZINC_SOLUTION_FILEPATH \
     > $JSON_SOLUTION_FILEPATH"
exe "$cmd"
reportNewEntity "$JSON_SOLUTION_FILEPATH"

reportTask "Converting MiniZinc statistics to JSON format"
exe "$THIS_DIR/stats2json $MINIZINC_STATS_FILEPATH > $JSON_STATS_FILEPATH"
reportNewEntity "$JSON_STATS_FILEPATH"

reportTask "Merging JSON files"
cmd="$THIS_DIR/merge-jsons $JSON_SOLUTION_FILEPATH $JSON_STATS_FILEPATH \
     > $JSON_OUTPUT_FILEPATH"
exe "$cmd"
reportNewEntity "$JSON_OUTPUT_FILEPATH"

reportTask "Cleaning up"
cmd="rm -rf $TMP_DIR"
exe "$cmd"

echo
