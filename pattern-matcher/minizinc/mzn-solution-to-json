#!/usr/bin/python

# Copyright (c) 2014, Gabriel Hjort Blindell <ghb@kth.se>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.



#=========
# IMPORTS
#=========

import json
import os.path
import sys



#================
# HELP FUNCTIONS
#================

def error(msg):
    sys.stderr.write("ERROR: " + msg + "\n")
    sys.exit(1)



#=============
# MAIN SCRIPT
#=============

# Check solution file
if len(sys.argv) < 2:
    sys.stderr.write("No solution file\n")
    sys.exit(1)
if len(sys.argv) > 2:
    sys.stderr.write("Too many arguments\n")
    sys.exit(1)
solution_file = sys.argv[1]
if not os.path.isfile(solution_file):
    error("Solution file '" + solution_file +"' not found")

# Read solution file
content = []
with open(solution_file, 'r') as file:
    content = file.readlines()

# Extract data
map_data = []
search_for = "NP="
for i in range(len(content)):
    linenr = str(i + 1)
    line = content[i].strip()
    if line.startswith(search_for):
        list_str = line[len(search_for):]
        if list_str[0] != "[" or list_str[-1] != "]":
            error("Invalid list of integers")
        list_str = list_str[1:-1]
        int_list = [ int(s.strip()) for s in list_str.split(",") ]
        map_data.append(int_list)

json_data = {}
json_data["pat-to-func-node-maps"] = map_data

# Print JSON
print json.dumps(json_data)
