0:
  %const.-3.copy.1 = ADDi $0, -3
  %const.2048.copy.1 = ADDiu $0, 2048
  %1 = CALL countbits (%n)
  SW %1, 0(%rpk)
  BGTU $%1, $%const.2048.copy.1, bb0
bb1:
4:
  %6 = LW 0(%const.@%global_precision)
  %7 = ADD $0, %6
  %8 = SLL %7, 1
  %9 = SLTI %8, 256
  BNE $0, $%9, bb2
bb3:
16:
  B reg2rsaref.exit
bb4:
25:
  %13 = SUBU r0, %8
  %28 = SUBU r0, %23
  %const.-256.copy.2 = ADDi $0, -256
  %const.256.copy.2 = ADDiu $0, 256
  %11 = SUBU %const.256.copy.2, %8
  %26 = SUBU %const.256.copy.2, %23
  %const.260.copy.1 = ADDiu $0, 260
  %const.0.copy.1 = ADDiu $0, 0
  %const.2.copy.1 = ADDiu $0, 2
  %gep_array = MUL %7, %const.2.copy.1
  %gep_array16 = MUL %22, %const.2.copy.1
  %const.516.copy.1 = ADDiu $0, 516
  (%gep6, %gep12, %gep17) = ADD3 (%gep_array, %n), (%const.516.copy.1, %rpk), (%gep_array16, %e)
  (%gep2, %gep8, %gep19) = ADD3 (%const.260.copy.1, %rpk), (%const.-256.copy.2, %gep6), (%const.-256.copy.2, %gep17)
  (%gep4, %gep10, %gep14) = ADD3 (%13, %gep2), (%const.260.copy.1, %rpk), (%28, %gep12)
  B reg2rsaref.exit1
bb2:
10:
reg2rsaref.exit:
  %21 = LW 0(%const.@%global_precision)
  %22 = ADD $0, %21
  %23 = SLL %22, 1
  %24 = SLTI %23, 256
  BNE $0, $%24, bb4
bb5:
31:
  %const.0.copy.4 = ADDiu $0, 0
  %gep = ADDI %rpk, 4
  B reg2rsaref.exit1
bb0:
reg2rsaref.exit1:
  %.0 = PHI (%const.-3.copy.1, 0) (%const.0.copy.1, 25) (%const.0.copy.4, 31)
  RetRA %.0
