 64  0:
  1    [%-1.copy.5] <- "%-1.copy.5 = #-1" <- []
       [] <- "%tmp.1 = zxth %divisor" <- [%divisor]
  2    [%1] <- "%1 = cmp.eq(%tmp.1, ##0)" <- []
  1    [] <- "if (%1) jump significance.exit.thread" <- [%1]
 40  2:
  1    [%dividend.copy.2] <- "%dividend.copy.2 = %dividend" <- [%dividend]
  1    [%3] <- "%3 = memh(@global_precision = #@global_precision)" <- []
  1    [] <- "jump 5" <- []
247  ._crit_edge:
  1    [%39.copy.1] <- "%39.copy.1 = %39" <- [%39]
  1    [] <- "if (!%40) jump ._crit_edge.selectcont" <- [%40]
 92  ._crit_edge.selecttrue:
  1    [%-32768.copy.1] <- "%-32768.copy.1 = #-32768" <- []
247  ._crit_edge.selectcont:
  0    [%.1] <- "PHI (%-32768.copy.1, ._crit_edge.selecttrue) (%39.copy.1, ._crit_edge)" <- [%-32768.copy.1, %39.copy.1]
  1    [%..015.copy.2] <- "%..015.copy.2 = %..015" <- [%..015]
  1    [%28.copy.2] <- "%28.copy.2 = %28" <- [%28]
  1    [%remainder.2.copy.2] <- "%remainder.2.copy.2 = %remainder.2" <- [%remainder.2]
  1    [%.pre] <- "%.pre = memh(%..015)" <- [%..015]
255  26:
  0    [%27] <- "PHI (%.pre, ._crit_edge.selectcont) (%18.copy.1, .lr.ph)" <- [%.pre, %18.copy.1]
  0    [%.in] <- "PHI (%28.copy.2, ._crit_edge.selectcont) (%bits.0.lcssa.copy.1, .lr.ph)" <- [%28.copy.2, %bits.0.lcssa.copy.1]
  0    [%remainder.07] <- "PHI (%remainder.2.copy.2, ._crit_edge.selectcont) (%0.copy.7, .lr.ph)" <- [%remainder.2.copy.2, %0.copy.7]
  0    [%bitmask.16] <- "PHI (%.1, ._crit_edge.selectcont) (%bitmask.0.lcssa.copy.1, .lr.ph)" <- [%.1, %bitmask.0.lcssa.copy.1]
  0    [%.015] <- "PHI (%..015.copy.2, ._crit_edge.selectcont) (%gep2.copy.1, .lr.ph)" <- [%..015.copy.2, %gep2.copy.1]
  1    [%28] <- "%28 = add(%.in, #-1)" <- [%.in]
  1    [%42] <- "%42 = cmp.eq(%28, ##0)" <- [%28]
  1    [%29] <- "%29 = zxth %remainder.07" <- [%remainder.07]
  1    [%30] <- "%30 = asl(%29, #1)" <- [%29]
  1    [%31] <- "%31 = and(%30, #-32768)" <- [%30]
  1    [%32] <- "%32 = and(%bitmask.16, %27)" <- [%bitmask.16, %27]
       [] <- "%tmp.2 = zxth %32" <- [%32]
  2    [%not.] <- "%not. = !cmp.eq(%tmp.2, ##0)" <- []
  1    [%not..copy.1] <- "%not..copy.1 =P %not." <- [%not.]
  1    [%33] <- "%33 = zxtb %not..copy.1" <- [%not..copy.1]
  1    [%.] <- "%. = or(%33, %31)" <- [%33, %31]
       [] <- "%tmp.3 = zxth %." <- [%divisor, %.]
       [] <- "%tmp.4 = zxth %divisor" <- []
  3    [%34] <- "%34 = cmp.gtu(%tmp.4, %tmp.3)" <- []
       [] <- "%tmp.5 = lsr(%bitmask.16, #1)" <- [%bitmask.16]
  2    [%39] <- "%39 = zxth(%tmp.5)" <- []
  1    [] <- "if (%34) jump .selectcont" <- [%34]
127  35:
  1    [%36] <- "%36 = zxth %." <- [%.]
  1    [%37] <- "%37 = sub(%36, %21)" <- [%36, %21]
  1    [%38] <- "%38 = and(%37, #-32768)" <- [%37]
255  .selectcont:
  0    [%remainder.2] <- "PHI (%38, 35) (%., 26)" <- [%38, %.]
       [] <- "%tmp.6 = zxth %39" <- [%39]
  2    [%40] <- "%40 = cmp.eq(%tmp.6, ##0)" <- []
  1    [%.015.copy.1] <- "%.015.copy.1 = %.015" <- [%.015]
  1    [] <- "if (!%40) jump .selectcont.selectcont" <- [%40]
 95  .selectcont.selecttrue:
  1    [%gep4] <- "%gep4 = add(%.015, #2)" <- [%.015]
255  .selectcont.selectcont:
  0    [%..015] <- "PHI (%gep4, .selectcont.selecttrue) (%.015.copy.1, .selectcont)" <- [%gep4, %.015.copy.1]
  1    [%remainder.2.copy.1] <- "%remainder.2.copy.1 = %remainder.2" <- [%remainder.2]
  1    [] <- "if (!%42) jump ._crit_edge" <- [%42]
 64  significance.exit.thread:
  0    [%.0] <- "PHI (%0.copy.1, 5) (%-1.copy.5, 0) (%remainder.2.copy.1, .selectcont.selectcont)" <- [%0.copy.1, %-1.copy.5, %remainder.2.copy.1]
  1    [] <- "return %.0" <- [%.0]
634  8:
  1    [%gep.copy.1] <- "%gep.copy.1 = %gep" <- [%gep]
  1    [%10] <- "%10 = add(%-1.copy.5, %precision.0.i)" <- [%-1.copy.5, %precision.0.i]
       [] <- "%tmp.7 = zxth %10" <- [%10]
  2    [%11] <- "%11 = cmp.eq(%tmp.7, ##0)" <- []
  1    [] <- "if (%11) jump significance.exit.thread" <- [%11]
655  5:
  0    [%.0.i] <- "PHI (%gep.copy.1, 8) (%dividend.copy.2, 2)" <- [%gep.copy.1, %dividend.copy.2]
  0    [%precision.0.i] <- "PHI (%10, 8) (%3, 2)" <- [%10, %3]
  1    [%0.copy.1] <- "%0.copy.1 = #0" <- []
  1    [%gep, %6] <- "%6 = memuh (%.0.i ++ #2)" <- [%.0.i, %.0.i]
       [] <- "%tmp.8 = zxth %6" <- [%6]
  2    [%7] <- "%7 = cmp.eq(%tmp.8, ##0)" <- []
  1    [] <- "if (%7) jump 8" <- [%7]
 20  significance.exit:
       [] <- "%tmp.9 = zxth %precision.0.i" <- [%precision.0.i]
  2    [%14] <- "%14 = cmp.eq(%tmp.9, ##0)" <- []
  1    [] <- "if (%14) jump significance.exit.thread" <- [%14]
 12  15:
  1    [%4] <- "%4 = sxth(%3)" <- [%3]
  1    [%12] <- "%12 = sxth(%precision.0.i)" <- [%precision.0.i]
  1    [%-32768.copy.3] <- "%-32768.copy.3 = #-32768" <- []
  1    [%17] <- "%17 = asl(%12, #4)" <- [%12]
  1    [%13] <- "%13 = sub(%4, %12)" <- [%4, %12]
  1    [%gep2] <- "%gep2 = addasl(%dividend, %13, #1)" <- [%dividend, %13]
  1    [%18] <- "%18 = memh(%gep2)" <- [%gep2]
       [] <- "%tmp.10 = zxth %18" <- [%18]
  2    [%19] <- "%19 = cmp.gt(%tmp.10, ##-1)" <- []
  1    [] <- "if (!%19) jump .preheader" <- [%19]
255  .lr.ph10:
  0    [%bitmask.09] <- "PHI (%-32768.copy.3, 15) (%22, .lr.ph10)" <- [%-32768.copy.3, %22]
  0    [%bits.08] <- "PHI (%23, .lr.ph10) (%17, 15)" <- [%23, %17]
       [] <- "%tmp.11 = lsr(%bitmask.09, #1)" <- [%bitmask.09]
  2    [%22] <- "%22 = zxth(%tmp.11)" <- []
  1    [%24] <- "%24 = and(%22, %18)" <- [%22, %18]
       [] <- "%tmp.12 = zxth %24" <- [%24]
  2    [%25] <- "%25 = cmp.eq(%tmp.12, ##0)" <- []
  1    [%23] <- "%23 = add(%bits.08, #-1)" <- [%bits.08]
  1    [] <- "if (%25) jump .lr.ph10" <- [%25]
 12  .preheader:
  0    [%bitmask.0.lcssa] <- "PHI (%22, .lr.ph10) (%-32768.copy.3, 15)" <- [%22, %-32768.copy.3]
  0    [%bits.0.lcssa] <- "PHI (%23, .lr.ph10) (%17, 15)" <- [%23, %17]
  1    [%20] <- "%20 = cmp.eq(%bits.0.lcssa, ##0)" <- [%bits.0.lcssa]
  1    [] <- "if (%20) jump significance.exit.thread" <- [%20]
  7  .lr.ph:
  1    [%21] <- "%21 = zxth %divisor" <- [%divisor]
  1    [%bits.0.lcssa.copy.1] <- "%bits.0.lcssa.copy.1 = %bits.0.lcssa" <- [%bits.0.lcssa]
  1    [%gep2.copy.1] <- "%gep2.copy.1 = %gep2" <- [%gep2]
  1    [%bitmask.0.lcssa.copy.1] <- "%bitmask.0.lcssa.copy.1 = %bitmask.0.lcssa" <- [%bitmask.0.lcssa]
  1    [%18.copy.1] <- "%18.copy.1 = %18" <- [%18]
  1    [%0.copy.7] <- "%0.copy.7 = #0" <- []
  1    [] <- "jump 26" <- []
