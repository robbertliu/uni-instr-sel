 21  0:
  1    [%1] <- "%1 = !cmp.gt(%quality, ##<1 - 1>)" <- [%quality]
  1    [] <- "if (!%1) jump .selectcont" <- [%1]
  8  .selecttrue:
  1    [%1.copy.3] <- "%1.copy.3 = ##1" <- []
 21  .selectcont:
  0    [%.quality] <- "PHI (%quality, 0) (%1.copy.3, .selecttrue)" <- [%quality, %1.copy.3]
  1    [%2] <- "%2 = cmp.gt(%.quality, ##100)" <- [%.quality]
  1    [] <- "if (!%2) jump .selectcont.selectcont" <- [%2]
 10  .selectcont.selecttrue:
  1    [%100.copy.2] <- "%100.copy.2 = ##100" <- []
 21  .selectcont.selectcont:
  0    [%..quality] <- "PHI (%.quality, .selectcont) (%100.copy.2, .selectcont.selecttrue)" <- [%.quality, %100.copy.2]
  1    [%3] <- "%3 = !cmp.gt(%..quality, ##<50 - 1>)" <- [%..quality]
  1    [] <- "if (!%3) jump 6" <- [%3]
 10  4:
  1    [%5000.copy.1] <- "%5000.copy.1 = ##5000" <- []
       [] <- "ADJCALLSTACKDOWN" <- [%..quality, %5000.copy.1]
       [] <- "%5 = __hexagon_divsi(%5000.copy.1, %..quality)" <- []
  3    [%5] <- "ADJCALLSTACKDOWN" <- []
 21  9:
  0    [%.0] <- "PHI (%5, 4) (%8, 6)" <- [%5, %8]
  1    [] <- "return %.0" <- [%.0]
 10  6:
  1    [%7] <- "%7 = asl(%..quality, #1)" <- [%..quality]
  1    [%8] <- "%8 = sub(#200, %7)" <- [%7]
  1    [] <- "jump 9" <- []
