--------------------------------------------------------------------------------
-- |
-- Module      : Language.InstrSel.TargetMachines.Generators.HaskellCodeGenerator
-- Copyright   : (c) Gabriel Hjort Blindell 2013-2015
-- License     : BSD-style (see the LICENSE file)
--
-- Maintainer  : ghb@kth.se
-- Stability   : experimental
-- Portability : portable
--
-- Takes a target machine and generators corresponding Haskell code.
--
--------------------------------------------------------------------------------

module Language.InstrSel.TargetMachines.Generators.HaskellCodeGenerator where

import Language.InstrSel.TargetMachines.Base
  ( TargetMachine (tmID)
  , fromTargetMachineID
  )
import Language.InstrSel.Utils
  ( replace )



-------------
-- Functions
-------------

-- | Takes a 'TargetMachine' and generates corresponding Haskell source code.
-- The source code is then wrapped inside a module with name equal to the
-- 'TargetMachineID'.
generateModule :: TargetMachine -> String
generateModule tm =
  let renameFuncs str = replace "mkGraph" "I.mkGraph" str
      tm_id = fromTargetMachineID (tmID tm)
      boiler_src = "-----------------------------------------------------------\
                   \---------------------\n\
                   \-- |\n\
                   \-- Module      : Language.InstrSel.TargetMachines.Targets."
                   ++ tm_id ++ "\n\
                   \-- Stability   : experimental\n\
                   \-- Portability : portable\n\
                   \--\n\
                   \-- THIS MODULE HAS BEEN AUTOGENERATED!\n\
                   \--\n\
                   \-----------------------------------------------------------\
                   \---------------------\n\n"
      header_src = "module Language.InstrSel.TargetMachines.Targets."
                   ++ tm_id ++ "\n\
                   \  ( theTM )\n\
                   \where\n\n\
                   \import Language.InstrSel.Constraints\n\
                   \import Language.InstrSel.DataTypes\n\
                   \import Language.InstrSel.Graphs\n\
                   \import qualified Data.Graph.Inductive as I\n\
                   \import Language.InstrSel.OpStructures\n\
                   \import Language.InstrSel.OpTypes\n\
                   \import Language.InstrSel.TargetMachines\n\
                   \import Language.InstrSel.Utils\n\
                   \import Prelude \n\
                   \  hiding\n\
                   \  ( LT, GT )\n\n"
      tm_func_src = "theTM :: TargetMachine\n\
                    \theTM =\n" ++ (renameFuncs $ show tm)
  in boiler_src ++ prettyPrint tm_func_src

prettyPrint :: String -> String
prettyPrint str =
  -- TODO: implement
  str
